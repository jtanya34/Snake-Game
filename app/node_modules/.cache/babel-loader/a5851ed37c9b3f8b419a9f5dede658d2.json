{"ast":null,"code":"import _objectSpread from \"/Users/tanya/study/snakes/app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/tanya/study/snakes/app/src/Game.js\";\nimport React, { Component, PropTypes } from 'react';\nimport Snake from './components/Snake';\nimport Food from './components/Food';\nimport Board from './components/Board';\nimport DebugState from './components/DebugState';\nimport { UP, DOWN, LEFT, RIGHT } from './helpers/constants';\nimport { pluck } from './helpers/util';\nimport { Button, Modal } from 'react-bootstrap';\n\nconst getDefaultState = boardSize => {\n  return {\n    size: {\n      board: boardSize,\n      player: 10\n    },\n    position: {\n      food: {\n        top: Math.floor(Math.random() * (boardSize.boardSize - 10)),\n        left: Math.floor(Math.random() * (boardSize.boardSize - 10))\n      },\n      snake: [{\n        top: 10,\n        left: 10,\n        dir: RIGHT\n      }]\n    },\n    snakeSpeed: 1,\n    timeElapsed: 0,\n    snakeIndex: 0,\n    playerScore: 0,\n    baseScore: 10,\n    gameOver: false\n  };\n};\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handlePlayerCollision = () => {\n      const newSnake = this.increaseSnakeSize();\n      this.setState({\n        size: _objectSpread({}, this.state.size, {\n          player: this.state.size.player + 10\n        }),\n        position: _objectSpread({}, this.state.position, {\n          snake: [...this.state.position.snake].concat(newSnake)\n        })\n      });\n    };\n\n    this.handleDebugToggle = () => {\n      this.setState({\n        debug: this.debug.checked\n      });\n    };\n\n    this.increaseSnakeSize = () => {\n      console.log(this.state);\n      this.setState({\n        snakeIndex: this.state.snakeIndex + 1\n      });\n      const newSnake = {\n        key: this.state.snakeIndex\n      };\n      const _this$state$size = this.state.size,\n            board = _this$state$size.board,\n            player = _this$state$size.player;\n      const snake = this.state.position.snake[0].snake;\n\n      switch (snake.dir) {\n        case UP:\n          newSnake.top = snake.top + player;\n          newSnake.left = snake.left;\n          break;\n\n        case DOWN:\n          newSnake.top = snake.top - player;\n          newSnake.left = snake.left;\n          break;\n\n        case LEFT:\n          newSnake.top = snake.top;\n          newSnake.left = snake.left - player;\n          break;\n\n        case RIGHT:\n          newSnake.top = snake.top;\n          newSnake.left = snake.left + player;\n          break;\n      }\n\n      return newSnake;\n    };\n\n    this.startGame = () => {\n      this.snakeInterval = setInterval(this.updateSnakePositions, 50);\n      this.timeInterval = setInterval(this.updateGame, 1000);\n    };\n\n    this.updateGame = () => {\n      const timeElapsed = this.state.timeElapsed;\n      this.updateTimeAndScore();\n\n      if (timeElapsed > 0) {\n        if (timeElapsed % 3 === 0) {\n          this.incrementSnakeSpeed();\n        }\n      }\n    };\n\n    this.updateTimeAndScore = () => {\n      const _this$state = this.state,\n            timeElapsed = _this$state.timeElapsed,\n            playerScore = _this$state.playerScore,\n            baseScore = _this$state.baseScore;\n      this.setState({\n        timeElapsed: timeElapsed + 1,\n        playerScore: playerScore + baseScore\n      });\n    };\n\n    this.incrementSnakeSpeed = () => {\n      const snakeSpeed = this.state.snakeSpeed;\n      this.setState({\n        snakeSpeed: parseFloat((snakeSpeed + 0.25).toFixed(2))\n      });\n    };\n\n    this.gameOver = () => {\n      const gameOver = this.state.gameOver;\n      clearInterval(this.gameInterval);\n      clearInterval(this.enemyInterval);\n      clearInterval(this.timeInterval);\n      this.setState({\n        gameOver: true\n      });\n    };\n\n    this.resetGame = () => {\n      const _this$props = this.props,\n            boardSize = _this$props.boardSize,\n            playerSize = _this$props.playerSize;\n      const _this$state2 = this.state,\n            playerScore = _this$state2.playerScore,\n            highScore = _this$state2.highScore,\n            globalHighScore = _this$state2.globalHighScore,\n            debug = _this$state2.debug; // clear intervals\n\n      clearInterval(this.gameInterval);\n      clearInterval(this.enemyInterval);\n      clearInterval(this.timeInterval); // if high score is higher than global high score, update it\n\n      if (playerScore > globalHighScore) {\n        this.updateGlobalHighScore(playerScore);\n      } // reset state\n\n\n      this.setState(_objectSpread({}, getDefaultState({\n        boardSize,\n        playerSize,\n        highScore\n      }), {\n        // persist debug state and high scores\n        debug,\n        highScore: playerScore > highScore ? playerScore : highScore,\n        globalHighScore\n      })); // restart game\n\n      this.startGame();\n    };\n\n    this.updateSnakePositions = () => {\n      const _this$state3 = this.state,\n            snakeSpeed = _this$state3.snakeSpeed,\n            snake = _this$state3.position.snake; //const board=size.board.boardSize;\n\n      this.setState({\n        position: _objectSpread({}, this.state.position, {\n          snake: snake.map(snake => {\n            // based on direction, increment the correct value (top / left)\n            switch (snake.dir) {\n              case UP:\n                snake.top -= snakeSpeed;\n\n                if (snake.top === 0) {\n                  this.gameOver();\n                }\n\n                break;\n\n              case DOWN:\n                snake.top += snakeSpeed;\n\n                if (snake.top === this.state.size.board.boardSize) {\n                  this.gameOver();\n                }\n\n                break;\n\n              case LEFT:\n                snake.left -= snakeSpeed;\n\n                if (snake.left === 0) {\n                  this.gameOver();\n                }\n\n                break;\n\n              case RIGHT:\n                snake.left += snakeSpeed;\n\n                if (snake.left === this.state.size.board.boardSize) {\n                  this.gameOver();\n                }\n\n                break;\n            }\n\n            return snake;\n          })\n        })\n      });\n    };\n\n    this.handleSnakePositions = dirObj => {\n      console.log(dirObj);\n      const _this$state4 = this.state,\n            snakeSpeed = _this$state4.snakeSpeed,\n            snake = _this$state4.position.snake; //const board=size.board.boardSize;\n\n      this.setState({\n        position: _objectSpread({}, this.state.position, {\n          snake: snake.map(snake => {\n            // based on direction, increment the correct value (top / left)\n            switch (dirObj.dir) {\n              case UP:\n                if (dirObj.top === 0) {\n                  this.gameOver();\n                }\n\n                break;\n\n              case DOWN:\n                if (dirObj.top === this.state.size.board.boardSize) {\n                  this.gameOver();\n                }\n\n                break;\n\n              case LEFT:\n                if (dirObj.left === 0) {\n                  this.gameOver();\n                }\n\n                break;\n\n              case RIGHT:\n                if (dirObj.left === this.state.size.board.boardSize) {\n                  this.gameOver();\n                }\n\n                break;\n            }\n\n            snake.top = snake.top + 5 * dirObj.top;\n            snake.left = snake.left + 5 * dirObj.left;\n            snake.dir = dirObj.dir;\n            return snake;\n          })\n        })\n      });\n    };\n\n    const _boardSize = props.boardSize;\n    this.state = getDefaultState({\n      boardSize: _boardSize\n    });\n  } //  placeSnake=()=>{\n  //     const {player: playerPos}=this.state.position;\n  //     const side=pluck([UP,DOWN,LEFT,RIGHT]);\n  //     // generate snake object\n  //     const newSnake = this.increaseSnakeSize(playerPos,side)\n  //     this.setState({\n  //         ...this.state.position,\n  //         snake: newSnake\n  //     });\n  // }\n\n\n  render() {\n    const _this$state5 = this.state,\n          _this$state5$size = _this$state5.size,\n          board = _this$state5$size.board,\n          player = _this$state5$size.player,\n          playerPos = _this$state5.position.player,\n          playerScore = _this$state5.playerScore,\n          timeElapsed = _this$state5.timeElapsed;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, React.createElement(Board, {\n      dimension: this.state.size.board.boardSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, React.createElement(Food, {\n      key: 1,\n      size: this.state.size,\n      position: this.state.position.snake[0],\n      food: this.state.position.food,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }), this.state.gameOver === true && React.createElement(\"gameOver\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, React.createElement(Modal.Dialog, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      closeButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, \"Game Over\")), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, \"Player Score: \", playerScore)), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"secondary\",\n      onClick: this.resetGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, \"Restart\"), React.createElement(Button, {\n      variant: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, \"Close\")))), this.state.position.snake.map(snake => React.createElement(Snake, {\n      key: snake.key,\n      info: snake,\n      playerPosition: playerPos,\n      handleSnakePositions: this.handleSnakePositions,\n      onCollide: this.handlePlayerCollision,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }))));\n  }\n\n  componentDidMount() {\n    this.startGame(); //  this.fetchGlobalHighScore();\n  }\n\n  componentWillUnmount() {\n    // clearInterval(this.state.gameInterval);\n    clearInterval(this.state.snakeInterval);\n    clearInterval(this.state.timeInterval);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/tanya/study/snakes/app/src/Game.js"],"names":["React","Component","PropTypes","Snake","Food","Board","DebugState","UP","DOWN","LEFT","RIGHT","pluck","Button","Modal","getDefaultState","boardSize","size","board","player","position","food","top","Math","floor","random","left","snake","dir","snakeSpeed","timeElapsed","snakeIndex","playerScore","baseScore","gameOver","Game","constructor","props","handlePlayerCollision","newSnake","increaseSnakeSize","setState","state","concat","handleDebugToggle","debug","checked","console","log","key","startGame","snakeInterval","setInterval","updateSnakePositions","timeInterval","updateGame","updateTimeAndScore","incrementSnakeSpeed","parseFloat","toFixed","clearInterval","gameInterval","enemyInterval","resetGame","playerSize","highScore","globalHighScore","updateGlobalHighScore","map","handleSnakePositions","dirObj","render","playerPos","componentDidMount","componentWillUnmount"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,OAAQC,KAAR,MAAoB,oBAApB;AACA,OAAQC,IAAR,MAAmB,mBAAnB;AACA,OAAOC,KAAP,MAAmB,oBAAnB;AACA,OAAOC,UAAP,MAAwB,yBAAxB;AACA,SAASC,EAAT,EAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,KAAzB,QAAsC,qBAAtC;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA6B,iBAA7B;;AAEA,MAAMC,eAAe,GAAEC,SAAD,IAAa;AAE/B,SAAO;AACHC,IAAAA,IAAI,EAAE;AACFC,MAAAA,KAAK,EAAEF,SADL;AAEFG,MAAAA,MAAM,EAAE;AAFN,KADH;AAKHC,IAAAA,QAAQ,EAAC;AAELC,MAAAA,IAAI,EAAC;AACLC,QAAAA,GAAG,EAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAeT,SAAS,CAACA,SAAV,GAAoB,EAAnC,CAAX,CADC;AAELU,QAAAA,IAAI,EAACH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAeT,SAAS,CAACA,SAAV,GAAoB,EAAnC,CAAX;AAFA,OAFA;AAMLW,MAAAA,KAAK,EAAC,CAAC;AACHL,QAAAA,GAAG,EAAC,EADD;AAEHI,QAAAA,IAAI,EAAC,EAFF;AAGHE,QAAAA,GAAG,EAACjB;AAHD,OAAD;AAND,KALN;AAiBHkB,IAAAA,UAAU,EAAC,CAjBR;AAkBHC,IAAAA,WAAW,EAAC,CAlBT;AAmBHC,IAAAA,UAAU,EAAC,CAnBR;AAoBHC,IAAAA,WAAW,EAAE,CApBV;AAqBHC,IAAAA,SAAS,EAAC,EArBP;AAsBHC,IAAAA,QAAQ,EAAC;AAtBN,GAAP;AAyBH,CA3BD;;AA+BA,MAAMC,IAAN,SAAmBjC,SAAnB,CAA4B;AAC5BkC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAoBlBC,qBApBkB,GAoBM,MAAM;AAC3B,YAAMC,QAAQ,GAAG,KAAKC,iBAAL,EAAjB;AAEC,WAAKC,QAAL,CAAc;AACVxB,QAAAA,IAAI,oBACG,KAAKyB,KAAL,CAAWzB,IADd;AAEAE,UAAAA,MAAM,EAAC,KAAKuB,KAAL,CAAWzB,IAAX,CAAgBE,MAAhB,GAAuB;AAF9B,UADM;AAKVC,QAAAA,QAAQ,oBACD,KAAKsB,KAAL,CAAWtB,QADV;AAEJO,UAAAA,KAAK,EAAE,CAAC,GAAG,KAAKe,KAAL,CAAWtB,QAAX,CAAoBO,KAAxB,EAA+BgB,MAA/B,CAAsCJ,QAAtC;AAFH;AALE,OAAd;AAUH,KAjCiB;;AAAA,SAmClBK,iBAnCkB,GAmCE,MAAM;AACtB,WAAKH,QAAL,CAAc;AACVI,QAAAA,KAAK,EAAE,KAAKA,KAAL,CAAWC;AADR,OAAd;AAGH,KAvCiB;;AAAA,SAyClBN,iBAzCkB,GAyCA,MAAI;AAClBO,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,KAAjB;AACA,WAAKD,QAAL,CAAc;AACVV,QAAAA,UAAU,EAAE,KAAKW,KAAL,CAAWX,UAAX,GAAwB;AAD1B,OAAd;AAIA,YAAMQ,QAAQ,GAAG;AACbU,QAAAA,GAAG,EAAE,KAAKP,KAAL,CAAWX;AADH,OAAjB;AANkB,+BAUQ,KAAKW,KAAL,CAAWzB,IAVnB;AAAA,YAUVC,KAVU,oBAUVA,KAVU;AAAA,YAUHC,MAVG,oBAUHA,MAVG;AAAA,YAWXQ,KAXW,GAWJ,KAAKe,KAAL,CAAWtB,QAAX,CAAoBO,KAApB,CAA0B,CAA1B,CAXI,CAWXA,KAXW;;AAalB,cAAOA,KAAK,CAACC,GAAb;AACI,aAAKpB,EAAL;AACI+B,UAAAA,QAAQ,CAACjB,GAAT,GAAeK,KAAK,CAACL,GAAN,GAAUH,MAAzB;AACAoB,UAAAA,QAAQ,CAACb,IAAT,GAAgBC,KAAK,CAACD,IAAtB;AACA;;AACJ,aAAKjB,IAAL;AACA8B,UAAAA,QAAQ,CAACjB,GAAT,GAAeK,KAAK,CAACL,GAAN,GAAYH,MAA3B;AACAoB,UAAAA,QAAQ,CAACb,IAAT,GAAgBC,KAAK,CAACD,IAAtB;AACI;;AACJ,aAAKhB,IAAL;AACA6B,UAAAA,QAAQ,CAACjB,GAAT,GAAeK,KAAK,CAACL,GAArB;AACAiB,UAAAA,QAAQ,CAACb,IAAT,GAAgBC,KAAK,CAACD,IAAN,GAAWP,MAA3B;AACI;;AACJ,aAAKR,KAAL;AACA4B,UAAAA,QAAQ,CAACjB,GAAT,GAAeK,KAAK,CAACL,GAArB;AACAiB,UAAAA,QAAQ,CAACb,IAAT,GAAgBC,KAAK,CAACD,IAAN,GAAaP,MAA7B;AACI;AAhBR;;AAmBA,aAAOoB,QAAP;AACH,KA1EiB;;AAAA,SA6ElBW,SA7EkB,GA6ER,MAAI;AACV,WAAKC,aAAL,GAAqBC,WAAW,CAAC,KAAKC,oBAAN,EAA4B,EAA5B,CAAhC;AACA,WAAKC,YAAL,GAAoBF,WAAW,CAAC,KAAKG,UAAN,EAAkB,IAAlB,CAA/B;AAEH,KAjFiB;;AAAA,SAmFlBA,UAnFkB,GAmFP,MAAI;AAAA,YACHzB,WADG,GACa,KAAKY,KADlB,CACHZ,WADG;AAEX,WAAK0B,kBAAL;;AACA,UAAG1B,WAAW,GAAC,CAAf,EAAiB;AACb,YAAIA,WAAW,GAAG,CAAd,KAAoB,CAAxB,EAA2B;AACvB,eAAK2B,mBAAL;AACH;AACJ;AACJ,KA3FiB;;AAAA,SA4FlBD,kBA5FkB,GA4FG,MAAM;AAAA,0BACwB,KAAKd,KAD7B;AAAA,YACfZ,WADe,eACfA,WADe;AAAA,YACFE,WADE,eACFA,WADE;AAAA,YACWC,SADX,eACWA,SADX;AAGvB,WAAKQ,QAAL,CAAc;AACVX,QAAAA,WAAW,EAAEA,WAAW,GAAG,CADjB;AAEXE,QAAAA,WAAW,EAAEA,WAAW,GAAGC;AAFhB,OAAd;AAIH,KAnGiB;;AAAA,SAqGlBwB,mBArGkB,GAqGE,MAAI;AAAA,YACb5B,UADa,GACC,KAAKa,KADN,CACbb,UADa;AAEpB,WAAKY,QAAL,CAAc;AACVZ,QAAAA,UAAU,EAAC6B,UAAU,CAAC,CAAC7B,UAAU,GAAG,IAAd,EAAoB8B,OAApB,CAA4B,CAA5B,CAAD;AADX,OAAd;AAGH,KA1GiB;;AAAA,SA4GlBzB,QA5GkB,GA4GT,MAAI;AAAA,YACDA,QADC,GACW,KAAKQ,KADhB,CACDR,QADC;AAGT0B,MAAAA,aAAa,CAAC,KAAKC,YAAN,CAAb;AACAD,MAAAA,aAAa,CAAC,KAAKE,aAAN,CAAb;AACAF,MAAAA,aAAa,CAAC,KAAKN,YAAN,CAAb;AAEA,WAAKb,QAAL,CAAc;AACVP,QAAAA,QAAQ,EAAC;AADC,OAAd;AAIH,KAvHiB;;AAAA,SAyHlB6B,SAzHkB,GAyHN,MAAM;AAAA,0BACoB,KAAK1B,KADzB;AAAA,YACNrB,SADM,eACNA,SADM;AAAA,YACKgD,UADL,eACKA,UADL;AAAA,2BAE6C,KAAKtB,KAFlD;AAAA,YAENV,WAFM,gBAENA,WAFM;AAAA,YAEOiC,SAFP,gBAEOA,SAFP;AAAA,YAEkBC,eAFlB,gBAEkBA,eAFlB;AAAA,YAEmCrB,KAFnC,gBAEmCA,KAFnC,EAId;;AACAe,MAAAA,aAAa,CAAC,KAAKC,YAAN,CAAb;AACAD,MAAAA,aAAa,CAAC,KAAKE,aAAN,CAAb;AACAF,MAAAA,aAAa,CAAC,KAAKN,YAAN,CAAb,CAPc,CASd;;AACA,UAAItB,WAAW,GAAGkC,eAAlB,EAAmC;AAC/B,aAAKC,qBAAL,CAA2BnC,WAA3B;AACH,OAZa,CAcd;;;AACA,WAAKS,QAAL,mBACO1B,eAAe,CAAC;AAAEC,QAAAA,SAAF;AAAagD,QAAAA,UAAb;AAAyBC,QAAAA;AAAzB,OAAD,CADtB;AAEI;AACApB,QAAAA,KAHJ;AAIIoB,QAAAA,SAAS,EAAEjC,WAAW,GAAGiC,SAAd,GAA0BjC,WAA1B,GAAwCiC,SAJvD;AAKIC,QAAAA;AALJ,UAfc,CAsBd;;AACA,WAAKhB,SAAL;AAEH,KAlJiB;;AAAA,SAmJlBG,oBAnJkB,GAmJG,MAAI;AAAA,2BAEkB,KAAKX,KAFvB;AAAA,YAEhBb,UAFgB,gBAEhBA,UAFgB;AAAA,YAEQF,KAFR,gBAEJP,QAFI,CAEQO,KAFR,EAGxB;;AAEO,WAAKc,QAAL,CAAc;AACVrB,QAAAA,QAAQ,oBACD,KAAKsB,KAAL,CAAWtB,QADV;AAEJO,UAAAA,KAAK,EAAEA,KAAK,CAACyC,GAAN,CAAUzC,KAAK,IAAI;AAEtB;AACA,oBAAOA,KAAK,CAACC,GAAb;AACI,mBAAKpB,EAAL;AACAmB,gBAAAA,KAAK,CAACL,GAAN,IAAaO,UAAb;;AACA,oBAAIF,KAAK,CAACL,GAAN,KAAc,CAAlB,EAAoB;AAChB,uBAAKY,QAAL;AACH;;AACD;;AACJ,mBAAKzB,IAAL;AACAkB,gBAAAA,KAAK,CAACL,GAAN,IAAaO,UAAb;;AACA,oBAAIF,KAAK,CAACL,GAAN,KAAc,KAAKoB,KAAL,CAAWzB,IAAX,CAAgBC,KAAhB,CAAsBF,SAAxC,EAAkD;AAC9C,uBAAKkB,QAAL;AACH;;AACG;;AACJ,mBAAKxB,IAAL;AACAiB,gBAAAA,KAAK,CAACD,IAAN,IAAcG,UAAd;;AACA,oBAAIF,KAAK,CAACD,IAAN,KAAe,CAAnB,EAAqB;AACjB,uBAAKQ,QAAL;AACH;;AACG;;AACJ,mBAAKvB,KAAL;AACAgB,gBAAAA,KAAK,CAACD,IAAN,IAAcG,UAAd;;AACA,oBAAIF,KAAK,CAACD,IAAN,KAAe,KAAKgB,KAAL,CAAWzB,IAAX,CAAgBC,KAAhB,CAAsBF,SAAzC,EAAmD;AAC/C,uBAAKkB,QAAL;AACH;;AACG;AAxBJ;;AA2BA,mBAAOP,KAAP;AAED,WAhCI;AAFH;AADE,OAAd;AA0CH,KAlMa;;AAAA,SAmMlB0C,oBAnMkB,GAmMIC,MAAD,IAAU;AAC3BvB,MAAAA,OAAO,CAACC,GAAR,CAAYsB,MAAZ;AAD2B,2BAEY,KAAK5B,KAFjB;AAAA,YAEtBb,UAFsB,gBAEtBA,UAFsB;AAAA,YAEEF,KAFF,gBAEVP,QAFU,CAEEO,KAFF,EAG9B;;AAEO,WAAKc,QAAL,CAAc;AACVrB,QAAAA,QAAQ,oBACD,KAAKsB,KAAL,CAAWtB,QADV;AAEJO,UAAAA,KAAK,EAACA,KAAK,CAACyC,GAAN,CAAUzC,KAAK,IAAI;AAGrB;AACA,oBAAO2C,MAAM,CAAC1C,GAAd;AACI,mBAAKpB,EAAL;AACA,oBAAI8D,MAAM,CAAChD,GAAP,KAAe,CAAnB,EAAqB;AACjB,uBAAKY,QAAL;AACH;;AACD;;AACJ,mBAAKzB,IAAL;AACA,oBAAI6D,MAAM,CAAChD,GAAP,KAAe,KAAKoB,KAAL,CAAWzB,IAAX,CAAgBC,KAAhB,CAAsBF,SAAzC,EAAmD;AAC/C,uBAAKkB,QAAL;AACH;;AACG;;AACJ,mBAAKxB,IAAL;AAEA,oBAAI4D,MAAM,CAAC5C,IAAP,KAAgB,CAApB,EAAsB;AAClB,uBAAKQ,QAAL;AACH;;AACG;;AAEJ,mBAAKvB,KAAL;AAEA,oBAAI2D,MAAM,CAAC5C,IAAP,KAAgB,KAAKgB,KAAL,CAAWzB,IAAX,CAAgBC,KAAhB,CAAsBF,SAA1C,EAAoD;AAChD,uBAAKkB,QAAL;AACH;;AACG;AAvBJ;;AA0BAP,YAAAA,KAAK,CAACL,GAAN,GAAWK,KAAK,CAACL,GAAN,GAAa,IAAEgD,MAAM,CAAChD,GAAjC;AACAK,YAAAA,KAAK,CAACD,IAAN,GAAYC,KAAK,CAACD,IAAN,GAAe,IAAE4C,MAAM,CAAC5C,IAApC;AACAC,YAAAA,KAAK,CAACC,GAAN,GAAU0C,MAAM,CAAC1C,GAAjB;AACA,mBAAOD,KAAP;AAED,WAnCG;AAFF;AADE,OAAd;AA6CH,KArPa;;AAAA,UAEPX,UAFO,GAEKqB,KAFL,CAEPrB,SAFO;AAGd,SAAK0B,KAAL,GAAW3B,eAAe,CAAC;AAACC,MAAAA,SAAS,EAATA;AAAD,KAAD,CAA1B;AACH,GAL2B,CAO5B;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAoOIuD,EAAAA,MAAM,GAAE;AAAA,yBASA,KAAK7B,KATL;AAAA,2CAGAzB,IAHA;AAAA,UAGQC,KAHR,qBAGQA,KAHR;AAAA,UAGeC,MAHf,qBAGeA,MAHf;AAAA,UAIoBqD,SAJpB,gBAIApD,QAJA,CAIYD,MAJZ;AAAA,UAKAa,WALA,gBAKAA,WALA;AAAA,UAMAF,WANA,gBAMAA,WANA;AAUJ,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAE,KAAKY,KAAL,CAAWzB,IAAX,CAAgBC,KAAhB,CAAsBF,SAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAE,CAAX;AACA,MAAA,IAAI,EAAE,KAAK0B,KAAL,CAAWzB,IADjB;AAEA,MAAA,QAAQ,EAAE,KAAKyB,KAAL,CAAWtB,QAAX,CAAoBO,KAApB,CAA0B,CAA1B,CAFV;AAGA,MAAA,IAAI,EAAE,KAAKe,KAAL,CAAWtB,QAAX,CAAoBC,IAH1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,EAOE,KAAKqB,KAAL,CAAWR,QAAX,KAAwB,IAAzB,IACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD,CAAO,MAAP;AAAc,MAAA,WAAW,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD,CAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,CADJ,EAKI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAkBF,WAAlB,CADJ,CALJ,EASI,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,WAAhB;AAA4B,MAAA,OAAO,EAAE,KAAK+B,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,EAEI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFJ,CATJ,CADH,CARA,EA2BC,KAAKrB,KAAL,CAAWtB,QAAX,CAAoBO,KAApB,CAA0ByC,GAA1B,CAA8BzC,KAAK,IACpC,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAEA,KAAK,CAACsB,GAAlB;AACC,MAAA,IAAI,EAAEtB,KADP;AAEC,MAAA,cAAc,EAAE6C,SAFjB;AAGC,MAAA,oBAAoB,EAAE,KAAKH,oBAH5B;AAIC,MAAA,SAAS,EAAE,KAAK/B,qBAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADC,CA3BD,CADL,CADJ;AA6CH;;AACDmC,EAAAA,iBAAiB,GAAG;AAChB,SAAKvB,SAAL,GADgB,CAElB;AACD;;AAEDwB,EAAAA,oBAAoB,GAAG;AACpB;AACCd,IAAAA,aAAa,CAAC,KAAKlB,KAAL,CAAWS,aAAZ,CAAb;AACAS,IAAAA,aAAa,CAAC,KAAKlB,KAAL,CAAWY,YAAZ,CAAb;AACH;;AAxTuB;;AA0T5B,eAAenB,IAAf","sourcesContent":["import React ,{ Component, PropTypes } from 'react';\nimport  Snake  from './components/Snake';\nimport  Food  from './components/Food';\nimport Board  from './components/Board';\nimport DebugState  from './components/DebugState';\nimport { UP, DOWN, LEFT, RIGHT } from './helpers/constants';\nimport { pluck } from './helpers/util';\nimport { Button ,Modal} from 'react-bootstrap';\n\nconst getDefaultState=(boardSize)=>{\n   \n    return {\n        size: {\n            board: boardSize,\n            player: 10,\n        },\n        position:{\n\n            food:{\n            top:Math.floor(Math.random()*(boardSize.boardSize-10)),\n            left:Math.floor(Math.random()*(boardSize.boardSize-10))\n            },\n            snake:[{\n                top:10,\n                left:10,\n                dir:RIGHT,\n            }]\n        },\n        snakeSpeed:1,\n        timeElapsed:0,\n        snakeIndex:0,\n        playerScore: 0,\n        baseScore:10,\n        gameOver:false,\n\n    }\n}\n\n\n\nclass Game extends Component{\nconstructor(props){\n    super(props);\n    const {boardSize}= props;\n    this.state=getDefaultState({boardSize});\n}\n\n//  placeSnake=()=>{\n    \n//     const {player: playerPos}=this.state.position;\n//     const side=pluck([UP,DOWN,LEFT,RIGHT]);\n\n//     // generate snake object\n//     const newSnake = this.increaseSnakeSize(playerPos,side)\n\n//     this.setState({\n//         ...this.state.position,\n//         snake: newSnake\n//     });\n// }\n\nhandlePlayerCollision = () => {\n   const newSnake = this.increaseSnakeSize();\n\n    this.setState({\n        size:{\n            ...this.state.size,\n            player:this.state.size.player+10\n        },\n        position: {\n            ...this.state.position,\n            snake: [...this.state.position.snake].concat(newSnake)\n        }\n    });\n}\n\nhandleDebugToggle = () => {\n    this.setState({\n        debug: this.debug.checked\n    });\n}\n\nincreaseSnakeSize=()=>{\n    console.log(this.state)\n    this.setState({\n        snakeIndex: this.state.snakeIndex + 1\n    });\n\n    const newSnake = { \n        key: this.state.snakeIndex,\n    };\n\n    const { board, player } = this.state.size;\n    const {snake}=this.state.position.snake[0];\n\n    switch(snake.dir) {\n        case UP:\n            newSnake.top = snake.top+player;\n            newSnake.left = snake.left;\n            break;\n        case DOWN:\n        newSnake.top = snake.top - player;\n        newSnake.left = snake.left;\n            break; \n        case LEFT:\n        newSnake.top = snake.top;\n        newSnake.left = snake.left-player;\n            break;\n        case RIGHT:\n        newSnake.top = snake.top;\n        newSnake.left = snake.left + player;\n            break;\n    }\n\n    return newSnake;\n}\n\n\nstartGame=()=>{\n    this.snakeInterval = setInterval(this.updateSnakePositions, 50);\n    this.timeInterval = setInterval(this.updateGame, 1000);\n\n}\n\nupdateGame=()=>{\n    const { timeElapsed } = this.state;\n    this.updateTimeAndScore();\n    if(timeElapsed>0){\n        if (timeElapsed % 3 === 0) {\n            this.incrementSnakeSpeed();\n        }\n    }\n}\nupdateTimeAndScore = () => {\n    const { timeElapsed ,playerScore, baseScore} = this.state;\n\n    this.setState({\n        timeElapsed: timeElapsed + 1,\n       playerScore: playerScore + baseScore,\n    });\n}\n\nincrementSnakeSpeed=()=>{\n   const { snakeSpeed } =this.state;\n    this.setState({\n        snakeSpeed:parseFloat((snakeSpeed + 0.25).toFixed(2))\n    })\n}\n\ngameOver=()=>{\n    const { gameOver }= this.state;\n    \n    clearInterval(this.gameInterval); \n    clearInterval(this.enemyInterval);\n    clearInterval(this.timeInterval);\n\n    this.setState({\n        gameOver:true,\n    });\n    \n}\n\nresetGame = () => {\n    const { boardSize, playerSize } = this.props;\n    const { playerScore, highScore, globalHighScore, debug } = this.state;\n    \n    // clear intervals\n    clearInterval(this.gameInterval); \n    clearInterval(this.enemyInterval);\n    clearInterval(this.timeInterval);\n\n    // if high score is higher than global high score, update it\n    if (playerScore > globalHighScore) {\n        this.updateGlobalHighScore(playerScore);\n    }\n\n    // reset state\n    this.setState({\n        ...getDefaultState({ boardSize, playerSize, highScore }),\n        // persist debug state and high scores\n        debug,\n        highScore: playerScore > highScore ? playerScore : highScore,\n        globalHighScore\n    });\n    // restart game\n    this.startGame();\n\n}\nupdateSnakePositions=()=>{\n \n const { snakeSpeed, position: { snake }}= this.state;\n //const board=size.board.boardSize;\n \n        this.setState({\n            position: {\n                ...this.state.position,\n                snake: snake.map(snake => {\n\n                    // based on direction, increment the correct value (top / left)\n                    switch(snake.dir) {\n                        case UP:\n                        snake.top -= snakeSpeed;\n                        if (snake.top === 0){\n                            this.gameOver();\n                        }\n                        break;\n                    case DOWN:\n                    snake.top += snakeSpeed;\n                    if (snake.top === this.state.size.board.boardSize){\n                        this.gameOver();\n                    }\n                        break;\n                    case LEFT:\n                    snake.left -= snakeSpeed;\n                    if (snake.left === 0){\n                        this.gameOver();\n                    }\n                        break;\n                    case RIGHT:\n                    snake.left += snakeSpeed;\n                    if (snake.left === this.state.size.board.boardSize){\n                        this.gameOver();\n                    }\n                        break;\n                    }\n\n                    return snake;\n                \n                  })\n                \n         \n            }\n        \n        });\n       \n    }\nhandleSnakePositions=(dirObj)=>{\n    console.log(dirObj)\n const { snakeSpeed, position: { snake }}= this.state;\n //const board=size.board.boardSize;\n \n        this.setState({\n            position: {\n                ...this.state.position,\n                snake:snake.map(snake => {\n\n\n                    // based on direction, increment the correct value (top / left)\n                    switch(dirObj.dir) {\n                        case UP:\n                        if (dirObj.top === 0){\n                            this.gameOver();\n                        }\n                        break;\n                    case DOWN:\n                    if (dirObj.top === this.state.size.board.boardSize){\n                        this.gameOver();\n                    }\n                        break;\n                    case LEFT:\n                   \n                    if (dirObj.left === 0){\n                        this.gameOver();\n                    }\n                        break;\n\n                    case RIGHT:\n                   \n                    if (dirObj.left === this.state.size.board.boardSize){\n                        this.gameOver();\n                    }\n                        break;\n                    }\n\n                    snake.top= snake.top + (5*dirObj.top);\n                    snake.left= snake.left + ( 5*dirObj.left);\n                    snake.dir=dirObj.dir;\n                    return snake;\n                \n                  })\n                \n         \n            }\n        \n        });\n       \n    }\n    render(){\n      \n        const { \n            size: { board, player }, \n            position: { player: playerPos },\n            playerScore,\n            timeElapsed\n            //highScore,\n            //globalHighScore\n        } = this.state;\n        return (\n            <div>  \n                 <Board dimension={this.state.size.board.boardSize}>\n\n                 <Food key={1}\n                 size={this.state.size}\n                 position={this.state.position.snake[0]} \n                 food={this.state.position.food}/>\n\n                 {(this.state.gameOver === true )&&\n                 <gameOver>\n                    <Modal.Dialog>\n                        <Modal.Header closeButton>\n                            <Modal.Title>Game Over</Modal.Title>\n                        </Modal.Header>\n\n                        <Modal.Body>\n                            <p>Player Score: {playerScore}</p>\n                        </Modal.Body>\n\n                        <Modal.Footer>\n                            <Button variant=\"secondary\" onClick={this.resetGame}>Restart</Button>\n                            <Button variant=\"primary\">Close</Button>\n                        </Modal.Footer>\n                        </Modal.Dialog>\n                 </gameOver>\n                 }\n\n                  {\n                  this.state.position.snake.map(snake => \n                 <Snake key={snake.key}\n                  info={snake}\n                  playerPosition={playerPos}\n                  handleSnakePositions={this.handleSnakePositions} \n                  onCollide={this.handlePlayerCollision} />\n                  )\n                  }\n\n                  </Board>\n\n                {/* {false && <p style={{ position: 'fixed', bottom: 0, left: 16 }}>Debug: <input type=\"checkbox\" onChange={this.handleDebugToggle} ref={ n => this.debug = n }/></p>}\n                {this.state.debug && <DebugState data={this.state} />} */}\n            </div>\n            \n        )\n    }\n    componentDidMount() {\n        this.startGame();\n      //  this.fetchGlobalHighScore();\n    }\n\n    componentWillUnmount() {\n       // clearInterval(this.state.gameInterval);\n        clearInterval(this.state.snakeInterval);\n        clearInterval(this.state.timeInterval);\n    }\n}\nexport default Game;"]},"metadata":{},"sourceType":"module"}