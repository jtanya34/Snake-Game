{"ast":null,"code":"import _objectSpread from \"/Users/tanya/study/snakes/app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/tanya/study/snakes/app/src/Game.js\";\nimport React, { Component, PropTypes } from 'react';\nimport Snake from './components/Snake';\nimport Board from './components/Board';\nimport DebugState from './components/DebugState';\nimport { UP, DOWN, LEFT, RIGHT } from './helpers/constants';\nimport { pluck } from './helpers/util';\n\nconst getDefaultState = boardSize => {\n  return {\n    size: {\n      board: boardSize,\n      player: 25,\n      maxDim: boardSize * 25\n    },\n    position: {\n      player: {\n        top: 11,\n        //Math.floor(boardSize/2)*25,\n        left: 25 //Math.floor(boardSize/2)*25\n\n      },\n      snake: {\n        top: 11,\n        left: 25,\n        dir: UP\n      }\n    },\n    snakeSpeed: 5,\n    timeElapsed: 0,\n    snakeIndex: 0\n  };\n};\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n\n    this.placeSnake = () => {\n      const playerPos = this.state.position.player;\n      const side = pluck([UP, DOWN, LEFT, RIGHT]); // generate enemy object\n\n      const newSnake = this.increaseSnakeSize(playerPos, side);\n      this.setState(_objectSpread({}, this.state.position, {\n        snake: newSnake\n      }));\n    };\n\n    this.handleDebugToggle = () => {\n      this.setState({\n        debug: this.debug.checked\n      });\n    };\n\n    this.increaseSnakeSize = (position, side) => {\n      this.setState({\n        snakeIndex: this.state.snakeIndex + 1\n      });\n      const newSnake = {\n        key: this.state.snakeIndex\n      };\n      const _this$state$size = this.state.size,\n            maxDim = _this$state$size.maxDim,\n            player = _this$state$size.player;\n\n      switch (side) {\n        case UP:\n          newSnake.top = maxDim;\n          newSnake.left = position.left;\n          break;\n\n        case DOWN:\n          newSnake.top = 0 - player;\n          newSnake.left = position.left;\n          break;\n\n        case LEFT:\n          newSnake.top = position.top;\n          newSnake.left = maxDim;\n          break;\n\n        case RIGHT:\n          newSnake.top = position.top;\n          newSnake.left = 0 - player;\n          break;\n      }\n\n      return newSnake;\n    };\n\n    this.startGame = () => {\n      this.snakeInterval = setInterval(this.updateSnakePositions, 50);\n      this.timeInterval = setInterval(this.updateGame, 1000);\n    };\n\n    this.updateGame = () => {\n      const timeElapsed = this.state.timeElapsed;\n      this.updateTimeAndScore();\n\n      if (timeElapsed > 0) {\n        if (timeElapsed % 3 === 0) {\n          this.incrementSnakeSpeed();\n        }\n      }\n    };\n\n    this.updateTimeAndScore = () => {\n      const timeElapsed = this.state.timeElapsed;\n      this.setState({\n        timeElapsed: timeElapsed + 1 //  playerScore: playerScore + baseScore,\n\n      });\n    };\n\n    this.incrementSnakeSpeed = () => {\n      const snakeSpeed = this.state.snakeSpeed;\n      this.setState({\n        snakeSpeed: snakeSpeed + 1\n      });\n    };\n\n    this.updateSnakePositions = () => {\n      const _this$state = this.state,\n            snakeSpeed = _this$state.snakeSpeed,\n            snake = _this$state.position.snake;\n      this.setState({\n        position: _objectSpread({}, this.state.position, {\n          snake: {\n            top: 20 + snakeSpeed,\n            left: 20 //     dir:()=>{\n            //     // based on direction, increment the correct value (top / left)\n            //     switch(snake.dir) {\n            //         case UP: \n            //             snake.top -= snakeSpeed;\n            //             break;\n            //         case DOWN: \n            //             snake.top += snakeSpeed;\n            //             break;\n            //         case LEFT:\n            //             snake.left -= snakeSpeed;\n            //             break;\n            //         case RIGHT:\n            //             snake.left += snakeSpeed;\n            //             break;\n            //     }\n            //     return snake;\n\n          }\n        })\n      });\n    };\n\n    const boardSize = props.boardSize;\n    this.state = getDefaultState({\n      boardSize\n    });\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          _this$state2$size = _this$state2.size,\n          board = _this$state2$size.board,\n          player = _this$state2$size.player,\n          playerPos = _this$state2.position.player,\n          timeElapsed = _this$state2.timeElapsed;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(Board, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(Snake, {\n      key: this.state.position.snake.key,\n      info: this.state.position.snake,\n      playerPosition: playerPos,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    })));\n  }\n\n  componentDidMount() {\n    this.startGame(); //  this.fetchGlobalHighScore();\n  }\n\n  componentWillUnmount() {\n    // clearInterval(this.state.gameInterval);\n    clearInterval(this.state.snakeInterval);\n    clearInterval(this.state.timeInterval);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/tanya/study/snakes/app/src/Game.js"],"names":["React","Component","PropTypes","Snake","Board","DebugState","UP","DOWN","LEFT","RIGHT","pluck","getDefaultState","boardSize","size","board","player","maxDim","position","top","left","snake","dir","snakeSpeed","timeElapsed","snakeIndex","Game","constructor","props","placeSnake","playerPos","state","side","newSnake","increaseSnakeSize","setState","handleDebugToggle","debug","checked","key","startGame","snakeInterval","setInterval","updateSnakePositions","timeInterval","updateGame","updateTimeAndScore","incrementSnakeSpeed","render","componentDidMount","componentWillUnmount","clearInterval"],"mappings":"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","sourcesContent":["import React ,{ Component, PropTypes } from 'react';\nimport  Snake  from './components/Snake';\nimport Board  from './components/Board';\nimport DebugState  from './components/DebugState';\nimport { UP, DOWN, LEFT, RIGHT } from './helpers/constants';\nimport { pluck } from './helpers/util';\n\n\nconst getDefaultState=(boardSize)=>{\n    return {\n        size: {\n            board: boardSize,\n            player: 25,\n            maxDim: boardSize * 25\n        },\n        position:{\n            player:{\n            top:11,//Math.floor(boardSize/2)*25,\n            left:25,//Math.floor(boardSize/2)*25\n            },\n            snake:{\n                top:11,\n                left:25,\n                dir:UP,\n            }\n        },\n        snakeSpeed:5,\n        timeElapsed:0,\n        snakeIndex:0\n    }\n\n\n}\n\n\n\nclass Game extends Component{\nconstructor(props){\n    super(props);\n    const {boardSize}= props;\n    this.state=getDefaultState({boardSize});\n\n}\n\n placeSnake=()=>{\n    const {player: playerPos}=this.state.position;\n    const side=pluck([UP,DOWN,LEFT,RIGHT]);\n\n    // generate enemy object\n    const newSnake = this.increaseSnakeSize(playerPos,side)\n\n    this.setState({\n        ...this.state.position,\n        snake: newSnake\n    });\n}\nhandleDebugToggle = () => {\n    this.setState({\n        debug: this.debug.checked\n    });\n}\nincreaseSnakeSize=(position,side)=>{\n    this.setState({\n        snakeIndex: this.state.snakeIndex + 1\n    });\n\n    const newSnake = { key: this.state.snakeIndex};\n    const { maxDim, player } = this.state.size;\n\n    switch(side) {\n        case UP:\n            newSnake.top = maxDim;\n            newSnake.left = position.left;\n            break;\n        case DOWN:\n        newSnake.top = 0 - player;\n        newSnake.left = position.left;\n            break; \n        case LEFT:\n        newSnake.top = position.top;\n        newSnake.left = maxDim;\n            break;\n        case RIGHT:\n        newSnake.top = position.top;\n        newSnake.left = 0 - player;\n            break;\n    }\n\n    return newSnake;\n}\n\n\nstartGame=()=>{\n    this.snakeInterval = setInterval(this.updateSnakePositions, 50);\n    this.timeInterval = setInterval(this.updateGame, 1000);\n\n}\n\nupdateGame=()=>{\n    const { timeElapsed } = this.state;\n    this.updateTimeAndScore();\n    if(timeElapsed>0){\n        if (timeElapsed % 3 === 0) {\n            this.incrementSnakeSpeed();\n        }\n    }\n}\nupdateTimeAndScore = () => {\n    const { timeElapsed } = this.state;\n\n    this.setState({\n        timeElapsed: timeElapsed + 1,\n      //  playerScore: playerScore + baseScore,\n    });\n}\n\nincrementSnakeSpeed=()=>{\n   const { snakeSpeed } =this.state;\n    this.setState({\n        snakeSpeed:snakeSpeed+1\n    })\n}\n\nupdateSnakePositions=()=>{\n\n const { snakeSpeed, position: { snake }} = this.state;\n\n        this.setState({\n            position: {\n                ...this.state.position,\n                snake:  {\n                    \n                            top:20 + snakeSpeed,\n                            left:20\n                //     dir:()=>{\n                //     // based on direction, increment the correct value (top / left)\n                //     switch(snake.dir) {\n                //         case UP: \n                //             snake.top -= snakeSpeed;\n                //             break;\n                //         case DOWN: \n                //             snake.top += snakeSpeed;\n                //             break;\n                //         case LEFT:\n                //             snake.left -= snakeSpeed;\n                //             break;\n                //         case RIGHT:\n                //             snake.left += snakeSpeed;\n                //             break;\n                //     }\n\n                //     return snake;\n                \n                }\n            }\n        });\n    }\n    render(){\n        const { \n            size: { board, player }, \n            position: { player: playerPos },\n           // playerScore,\n            timeElapsed\n            //highScore,\n            //globalHighScore\n        } = this.state;\n        return (\n            <div>\n                 <Board >\n                 <Snake key={this.state.position.snake.key}\n                  info={this.state.position.snake}\n                 playerPosition={playerPos}/>\n                </Board>\n                {/* {false && <p style={{ position: 'fixed', bottom: 0, left: 16 }}>Debug: <input type=\"checkbox\" onChange={this.handleDebugToggle} ref={ n => this.debug = n }/></p>}\n                {this.state.debug && <DebugState data={this.state} />} */}\n            </div>\n            \n        )\n    }\n    componentDidMount() {\n        this.startGame();\n      //  this.fetchGlobalHighScore();\n    }\n\n    componentWillUnmount() {\n       // clearInterval(this.state.gameInterval);\n        clearInterval(this.state.snakeInterval);\n        clearInterval(this.state.timeInterval);\n    }\n}\nexport default Game;"]},"metadata":{},"sourceType":"module"}