{"ast":null,"code":"import _objectSpread from \"/Users/tanya/study/snakes/app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/tanya/study/snakes/app/src/Game.js\";\nimport React, { Component, PropTypes } from 'react';\nimport Snake from './components/Snake';\nimport Board from './components/Board';\nimport DebugState from './components/DebugState';\nimport { UP, DOWN, LEFT, RIGHT } from './helpers/constants';\nimport { pluck } from './helpers/util';\n\nconst getDefaultState = boardSize => {\n  return {\n    size: {\n      board: boardSize,\n      player: 5\n    },\n    position: {\n      player: {\n        top: Math.floor(boardSize / 2),\n        left: Math.floor(boardSize / 2)\n      },\n      snake: {\n        top: 10,\n        left: 10,\n        dir: LEFT\n      }\n    },\n    snakeSpeed: 1,\n    timeElapsed: 0,\n    snakeIndex: 0,\n    playerScore: 0,\n    baseScore: 0\n  };\n};\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n\n    this.placeSnake = () => {\n      const playerPos = this.state.position.player;\n      const side = pluck([UP, DOWN, LEFT, RIGHT]); // generate snake object\n\n      const newSnake = this.increaseSnakeSize(playerPos, side);\n      this.setState(_objectSpread({}, this.state.position, {\n        snake: newSnake\n      }));\n    };\n\n    this.handleDebugToggle = () => {\n      this.setState({\n        debug: this.debug.checked\n      });\n    };\n\n    this.increaseSnakeSize = (position, side) => {\n      console.log(this.state);\n      this.setState({\n        snakeIndex: this.state.snakeIndex + 1\n      });\n      const newSnake = {\n        key: this.state.snakeIndex,\n        dir: side\n      };\n      const _this$state$size = this.state.size,\n            board = _this$state$size.board,\n            player = _this$state$size.player;\n\n      switch (side) {\n        case UP:\n          newSnake.top = board;\n          newSnake.left = position.left;\n          break;\n\n        case DOWN:\n          newSnake.top = 0 - player;\n          newSnake.left = position.left;\n          break;\n\n        case LEFT:\n          newSnake.top = position.top;\n          newSnake.left = board;\n          break;\n\n        case RIGHT:\n          newSnake.top = position.top;\n          newSnake.left = 0 - player;\n          break;\n      }\n\n      return newSnake;\n    };\n\n    this.startGame = () => {\n      // this.snakeInterval = setInterval(this.handleSnakePositions, 50);\n      this.timeInterval = setInterval(this.updateGame, 1000);\n    };\n\n    this.updateGame = () => {\n      const timeElapsed = this.state.timeElapsed;\n      this.updateTimeAndScore();\n\n      if (timeElapsed > 0) {\n        if (timeElapsed % 3 === 0) {\n          this.incrementSnakeSpeed();\n        }\n      }\n    };\n\n    this.updateTimeAndScore = () => {\n      const timeElapsed = this.state.timeElapsed;\n      this.setState({\n        timeElapsed: timeElapsed + 1,\n        playerScore: playerScore + baseScore\n      });\n    };\n\n    this.incrementSnakeSpeed = () => {\n      const snakeSpeed = this.state.snakeSpeed;\n      this.setState({\n        snakeSpeed: parseFloat((snakeSpeed + 0.25).toFixed(2))\n      });\n    };\n\n    this.handleSnakePositions = dirObj => {\n      console.log(dirObj);\n      const _this$state = this.state,\n            snakeSpeed = _this$state.snakeSpeed,\n            snake = _this$state.position.snake; //const board=size.board.boardSize;\n\n      this.setState({\n        position: _objectSpread({}, this.state.position, {\n          snake: function (snake, board) {\n            // if (snake.top < 0 ){\n            //     snake.dir=DOWN\n            // }else if(snake.top > (board-10)){ \n            //     snake.dir=UP\n            // } else if(snake.left < (0 )){\n            //     snake.dir=RIGHT\n            // }else if(snake.left > (board-10) ){\n            //     snake.dir=LEFT\n            // }\n            // based on direction, increment the correct value (top / left)\n            switch (dirObj.dir) {\n              case UP:\n                if (snake.top === 0) return;\n                break;\n\n              case DOWN:\n                if (snake.top === board) return;\n                break;\n\n              case LEFT:\n                if (snake.left === 0) return;\n                break;\n\n              case RIGHT:\n                if (snake.left === board) return;\n                break;\n            }\n\n            snake.top = snake.top + 5 * dirObj.top;\n            snake.left = snake.left + 5 * dirObj.left;\n            return snake;\n          }(snake, this.state.size.board.boardSize)\n        })\n      });\n    };\n\n    const boardSize = props.boardSize;\n    this.state = getDefaultState({\n      boardSize\n    });\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          _this$state2$size = _this$state2.size,\n          board = _this$state2$size.board,\n          player = _this$state2$size.player,\n          playerPos = _this$state2.position.player,\n          timeElapsed = _this$state2.timeElapsed;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(Board, {\n      dimension: this.state.size.board.boardSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(Snake, {\n      key: this.state.position.snake.key,\n      info: this.state.position.snake,\n      playerPosition: playerPos,\n      handleSnakePositions: this.handleSnakePositions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    })));\n  }\n\n  componentDidMount() {\n    this.startGame(); //  this.fetchGlobalHighScore();\n  }\n\n  componentWillUnmount() {\n    // clearInterval(this.state.gameInterval);\n    clearInterval(this.state.snakeInterval);\n    clearInterval(this.state.timeInterval);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/tanya/study/snakes/app/src/Game.js"],"names":["React","Component","PropTypes","Snake","Board","DebugState","UP","DOWN","LEFT","RIGHT","pluck","getDefaultState","boardSize","size","board","player","position","top","Math","floor","left","snake","dir","snakeSpeed","timeElapsed","snakeIndex","playerScore","baseScore","Game","constructor","props","placeSnake","playerPos","state","side","newSnake","increaseSnakeSize","setState","handleDebugToggle","debug","checked","console","log","key","startGame","timeInterval","setInterval","updateGame","updateTimeAndScore","incrementSnakeSpeed","parseFloat","toFixed","handleSnakePositions","dirObj","render","componentDidMount","componentWillUnmount","clearInterval","snakeInterval"],"mappings":"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","sourcesContent":["import React ,{ Component, PropTypes } from 'react';\nimport  Snake  from './components/Snake';\nimport Board  from './components/Board';\nimport DebugState  from './components/DebugState';\nimport { UP, DOWN, LEFT, RIGHT } from './helpers/constants';\nimport { pluck } from './helpers/util';\n\n\nconst getDefaultState=(boardSize)=>{\n   \n    return {\n        size: {\n            board: boardSize,\n            player: 5,\n        },\n        position:{\n            player:{\n            top:Math.floor(boardSize/2),\n            left:Math.floor(boardSize/2)\n            },\n            snake:{\n                top:10,\n                left:10,\n                dir:LEFT,\n            }\n        },\n        snakeSpeed:1,\n        timeElapsed:0,\n        snakeIndex:0,\n       playerScore: 0,\n       baseScore:0,\n\n    }\n}\n\n\n\nclass Game extends Component{\nconstructor(props){\n    super(props);\n    const {boardSize}= props;\n    this.state=getDefaultState({boardSize});\n}\n\n placeSnake=()=>{\n    \n    const {player: playerPos}=this.state.position;\n    const side=pluck([UP,DOWN,LEFT,RIGHT]);\n\n    // generate snake object\n    const newSnake = this.increaseSnakeSize(playerPos,side)\n\n    this.setState({\n        ...this.state.position,\n        snake: newSnake\n    });\n}\n\n\nhandleDebugToggle = () => {\n    this.setState({\n        debug: this.debug.checked\n    });\n}\n\nincreaseSnakeSize=(position,side)=>{\n    console.log(this.state)\n    this.setState({\n        snakeIndex: this.state.snakeIndex + 1\n    });\n\n    const newSnake = { key: this.state.snakeIndex,dir:side};\n    const { board, player } = this.state.size;\n\n    switch(side) {\n        case UP:\n            newSnake.top = board;\n            newSnake.left = position.left;\n            break;\n        case DOWN:\n        newSnake.top = 0 - player;\n        newSnake.left = position.left;\n            break; \n        case LEFT:\n        newSnake.top = position.top;\n        newSnake.left = board;\n            break;\n        case RIGHT:\n        newSnake.top = position.top;\n        newSnake.left = 0 - player;\n            break;\n    }\n\n    return newSnake;\n}\n\n\nstartGame=()=>{\n   // this.snakeInterval = setInterval(this.handleSnakePositions, 50);\n    this.timeInterval = setInterval(this.updateGame, 1000);\n\n}\n\nupdateGame=()=>{\n    const { timeElapsed } = this.state;\n    this.updateTimeAndScore();\n    if(timeElapsed>0){\n        if (timeElapsed % 3 === 0) {\n            this.incrementSnakeSpeed();\n        }\n    }\n}\nupdateTimeAndScore = () => {\n    const { timeElapsed } = this.state;\n\n    this.setState({\n        timeElapsed: timeElapsed + 1,\n       playerScore: playerScore + baseScore,\n    });\n}\n\nincrementSnakeSpeed=()=>{\n   const { snakeSpeed } =this.state;\n    this.setState({\n        snakeSpeed:parseFloat((snakeSpeed + 0.25).toFixed(2))\n    })\n}\n\nhandleSnakePositions=(dirObj)=>{\n    console.log(dirObj)\n const { snakeSpeed, position: { snake }}= this.state;\n //const board=size.board.boardSize;\n \n        this.setState({\n            position: {\n                ...this.state.position,\n                snake:(function(snake,board){\n                    // if (snake.top < 0 ){\n                    //     snake.dir=DOWN\n                    // }else if(snake.top > (board-10)){ \n                    //     snake.dir=UP\n                    // } else if(snake.left < (0 )){\n                    //     snake.dir=RIGHT\n                    // }else if(snake.left > (board-10) ){\n                    //     snake.dir=LEFT\n                    // }\n                    \n\n                    // based on direction, increment the correct value (top / left)\n                    switch(dirObj.dir) {\n                        case UP:\n                        if (snake.top === 0) return;\n                        break;\n                    case DOWN:\n                        if (snake.top === board) return;\n                        break;\n                    case LEFT:\n                        if (snake.left === 0) return;\n                        break;\n                    case RIGHT:\n                        if (snake.left === board) return;\n                        break;\n                    }\n\n                    snake.top= snake.top + (5*dirObj.top);\n                    snake.left= snake.left + ( 5*dirObj.left);\n                    return snake;\n                \n                  }(snake,this.state.size.board.boardSize))\n                \n         \n            }\n        \n        });\n       \n    }\n    render(){\n      \n        const { \n            size: { board, player }, \n            position: { player: playerPos },\n           // playerScore,\n            timeElapsed\n            //highScore,\n            //globalHighScore\n        } = this.state;\n        return (\n            <div>\n                 <Board dimension={this.state.size.board.boardSize}>\n                 <Snake key={this.state.position.snake.key}\n                  info={this.state.position.snake}\n                 playerPosition={playerPos}\n                 handleSnakePositions={this.handleSnakePositions} />\n                </Board>\n                {/* {false && <p style={{ position: 'fixed', bottom: 0, left: 16 }}>Debug: <input type=\"checkbox\" onChange={this.handleDebugToggle} ref={ n => this.debug = n }/></p>}\n                {this.state.debug && <DebugState data={this.state} />} */}\n            </div>\n            \n        )\n    }\n    componentDidMount() {\n        this.startGame();\n      //  this.fetchGlobalHighScore();\n    }\n\n    componentWillUnmount() {\n       // clearInterval(this.state.gameInterval);\n        clearInterval(this.state.snakeInterval);\n        clearInterval(this.state.timeInterval);\n    }\n}\nexport default Game;"]},"metadata":{},"sourceType":"module"}