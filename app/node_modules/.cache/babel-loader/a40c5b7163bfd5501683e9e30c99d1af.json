{"ast":null,"code":"import _objectSpread from \"/Users/tanya/study/snakes/app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/tanya/study/snakes/app/src/Game.js\";\nimport React, { Component, PropTypes } from 'react';\nimport Snake from './components/Snake';\nimport Food from './components/Food';\nimport Board from './components/Board';\nimport DebugState from './components/DebugState';\nimport { UP, DOWN, LEFT, RIGHT } from './helpers/constants';\nimport { pluck } from './helpers/util';\nimport { Button, Modal } from 'react-bootstrap';\nimport _ from 'lodash';\n\nconst getDefaultState = (boardSize, color) => {\n  return {\n    size: {\n      board: boardSize,\n      player: 10\n    },\n    position: {\n      food: {\n        top: Math.floor(Math.random() * (boardSize - 10)),\n        left: Math.floor(Math.random() * (boardSize - 10)),\n        color: 'red'\n      },\n      snake: [{\n        top: 10,\n        left: 10,\n        dir: RIGHT,\n        color: color\n      }]\n    },\n    snakeSpeed: 1,\n    timeElapsed: 0,\n    snakeIndex: 0,\n    playerScore: 0,\n    baseScore: 10,\n    gameOver: false\n  };\n};\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handlePlayerCollision = () => {\n      const position = this.state.position.snake;\n      const newSnake = this.increaseSnakeSize(position);\n      this.setState({\n        size: _objectSpread({}, this.state.size, {\n          player: this.state.size.player\n        }),\n        position: {\n          food: {\n            top: Math.floor(Math.random() * (this.state.size.board - 10)),\n            left: Math.floor(Math.random() * (this.state.size.board - 10)),\n            color: 'red'\n          },\n          snake: [...this.state.position.snake].concat(newSnake)\n        }\n      });\n    };\n\n    this.handleDebugToggle = () => {\n      this.setState({\n        debug: this.debug.checked\n      });\n    };\n\n    this.increaseSnakeSize = position => {\n      console.log('increse snake size', this.state);\n      this.setState({\n        snakeIndex: this.state.snakeIndex + 1\n      });\n      const newSnake = {\n        key: this.state.snakeIndex,\n        dir: position[position.length - 1].dir,\n        color: 'red'\n      };\n      const player = this.state.size.player;\n      const snake = position[position.length - 1];\n\n      switch (snake.dir) {\n        case UP:\n          newSnake.top = snake.top + player;\n          newSnake.left = snake.left;\n          break;\n\n        case DOWN:\n          newSnake.top = snake.top - player;\n          newSnake.left = snake.left;\n          break;\n\n        case LEFT:\n          newSnake.top = snake.top;\n          newSnake.left = snake.left + player;\n          break;\n\n        case RIGHT:\n          newSnake.top = snake.top;\n          newSnake.left = snake.left - player;\n          break;\n\n        default:\n          break;\n      }\n\n      return newSnake;\n    };\n\n    this.startGame = () => {\n      this.snakeInterval = setInterval(this.updateSnakePositions, 50);\n      this.timeInterval = setInterval(this.updateGame, 1000);\n    };\n\n    this.updateGame = () => {\n      const timeElapsed = this.state.timeElapsed;\n      this.updateTimeAndScore();\n\n      if (timeElapsed > 0) {\n        if (timeElapsed % 3 === 0) {\n          this.incrementSnakeSpeed();\n        }\n      }\n    };\n\n    this.updateTimeAndScore = () => {\n      const _this$state = this.state,\n            timeElapsed = _this$state.timeElapsed,\n            playerScore = _this$state.playerScore,\n            baseScore = _this$state.baseScore;\n      this.setState({\n        timeElapsed: timeElapsed + 1,\n        playerScore: playerScore + baseScore\n      });\n    };\n\n    this.incrementSnakeSpeed = () => {\n      const snakeSpeed = this.state.snakeSpeed;\n      this.setState({\n        snakeSpeed: parseFloat((snakeSpeed + 0.25).toFixed(2))\n      });\n    };\n\n    this.gameOver = () => {\n      clearInterval(this.gameInterval);\n      clearInterval(this.snakeInterval);\n      clearInterval(this.timeInterval);\n      this.setState({\n        gameOver: true\n      });\n    };\n\n    this.resetGame = () => {\n      const _this$props = this.props,\n            boardSize = _this$props.boardSize,\n            color = _this$props.color;\n      const _this$state2 = this.state,\n            playerScore = _this$state2.playerScore,\n            highScore = _this$state2.highScore,\n            globalHighScore = _this$state2.globalHighScore,\n            debug = _this$state2.debug; // clear intervals\n\n      clearInterval(this.gameInterval);\n      clearInterval(this.snakeInterval);\n      clearInterval(this.timeInterval); // if high score is higher than global high score, update it\n\n      if (playerScore > globalHighScore) {\n        this.updateGlobalHighScore(playerScore);\n      } // reset state\n\n\n      this.setState(_objectSpread({}, getDefaultState(boardSize, color), {\n        // persist debug state and high scores\n        debug,\n        highScore: playerScore > highScore ? playerScore : highScore,\n        globalHighScore\n      })); // restart game\n\n      this.startGame();\n    };\n\n    this.updateSnakePositions = () => {\n      const _this$state3 = this.state,\n            snakeSpeed = _this$state3.snakeSpeed,\n            snake = _this$state3.position.snake; //const board=size.board.boardSize;\n\n      this.setState({\n        position: _objectSpread({}, this.state.position, {\n          snake: snake.filter(snake => !snake.remove).map(snake => {\n            if (snake.top < 0 - snake.top || snake.top > 300 + snake.top || snake.left < 0 - snake.top || snake.left > 300 + snake.top) {\n              snake.remove = true;\n              return enemy;\n            } // based on direction, increment the correct value (top / left)\n\n\n            switch (snake.dir) {\n              case UP:\n                snake.top = snake.top - snakeSpeed;\n\n                if (_.inRange(snake.top, -10, 0)) {\n                  this.gameOver();\n                }\n\n                break;\n\n              case DOWN:\n                snake.top = snake.top + snakeSpeed;\n\n                if (_.inRange(snake.top, this.state.size.board - 10, this.state.size.board)) {\n                  this.gameOver();\n                }\n\n                break;\n\n              case LEFT:\n                snake.left = snake.left - snakeSpeed;\n\n                if (_.inRange(snake.left, -10, 0)) {\n                  this.gameOver();\n                }\n\n                break;\n\n              case RIGHT:\n                snake.left = snake.left + snakeSpeed;\n\n                if (_.inRange(snake.left, this.state.size.board - 10, this.state.size.board)) {\n                  this.gameOver();\n                }\n\n                break;\n\n              default:\n                break;\n            }\n\n            return snake;\n          })\n        })\n      });\n    };\n\n    this.handleSnakePositions = dirObj => {\n      var snakes = [...this.state.position.snake];\n\n      if (dirObj.dir !== snakes[0].dir) {\n        switch (dirObj.dir) {\n          case UP:\n            if (snakes[0].dir === DOWN) {\n              let dump = Object.assign({}, snakes[0]);\n              snakes[0].top = snakes[snakes.length - 1].top;\n              snakes[0].left = snakes[snakes.length - 1].left;\n              snakes[snakes.length - 1].left = dump.left;\n              snakes[snakes.length - 1].top = dump.top;\n            } else if (snakes[0].dir === LEFT) {\n              for (let i = 1; i < snakes.length; i++) {\n                snakes[i].top = snakes[i].top + i * 10;\n                snakes[i].left = snakes[i].left - i * 10;\n              }\n            } else if (snakes[0].dir === RIGHT) {\n              for (let i = 1; i < snakes.length; i++) {\n                snakes[i].top = snakes[i].top + i * 10;\n                snakes[i].left = snakes[i].left + i * 10;\n              }\n            }\n\n            break;\n\n          case DOWN:\n            if (snakes[0].dir === UP) {\n              let dump = Object.assign({}, snakes[0]);\n              snakes[0].top = snakes[snakes.length - 1].top;\n              snakes[0].left = snakes[snakes.length - 1].left;\n              snakes[snakes.length - 1].left = dump.left;\n              snakes[snakes.length - 1].top = dump.top;\n            } else if (snakes[0].dir === LEFT) {\n              for (let i = 1; i < snakes.length; i++) {\n                snakes[i].top = snakes[i].top - i * 10;\n                snakes[i].left = snakes[i].left - i * 10;\n              }\n            } else if (snakes[0].dir === RIGHT) {\n              for (let i = 1; i < snakes.length; i++) {\n                snakes[i].top = snakes[i].top - i * 10;\n                snakes[i].left = snakes[i].left + i * 10;\n              }\n            }\n\n            break;\n\n          case LEFT:\n            if (snakes[0].dir === RIGHT) {\n              let dump = Object.assign({}, snakes[0]);\n              snakes[0].top = snakes[snakes.length - 1].top;\n              snakes[0].left = snakes[snakes.length - 1].left;\n              snakes[snakes.length - 1].left = dump.left;\n              snakes[snakes.length - 1].top = dump.top;\n            } else if (snakes[0].dir === UP) {\n              for (let i = 1; i < snakes.length; i++) {\n                snakes[i].top = snakes[i].top - i * 10;\n                snakes[i].left = snakes[i].left + i * 10;\n              }\n            } else if (snakes[0].dir === DOWN) {\n              for (let i = 1; i < snakes.length; i++) {\n                snakes[i].top = snakes[i].top + i * 10;\n                snakes[i].left = snakes[i].left + i * 10;\n              }\n            }\n\n            break;\n\n          case RIGHT:\n            if (snakes[0].dir === LEFT) {\n              let dump = Object.assign({}, snakes[0]);\n              snakes[0].top = snakes[snakes.length - 1].top;\n              snakes[0].left = snakes[snakes.length - 1].left;\n              snakes[snakes.length - 1].left = dump.left;\n              snakes[snakes.length - 1].top = dump.top;\n            } else if (snakes[0].dir === UP) {\n              for (let i = 1; i < snakes.length; i++) {\n                snakes[i].top = snakes[i].top - i * 10;\n                snakes[i].left = snakes[i].left - i * 10;\n              }\n            } else if (snakes[0].dir === DOWN) {\n              for (let i = 1; i < snakes.length; i++) {\n                snakes[i].top = snakes[i].top + i * 10;\n                snakes[i].left = snakes[i].left - i * 10;\n              }\n            }\n\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      this.setState({\n        position: _objectSpread({}, this.state.position, {\n          snake: snakes.map(snake => {\n            snake.top = snake.top + 1 * dirObj.top;\n            snake.left = snake.left + 1 * dirObj.left;\n            snake.dir = dirObj.dir;\n            return snake;\n          })\n        })\n      });\n    };\n\n    const _boardSize = props.boardSize,\n          _color = props.color;\n    this.state = getDefaultState(_boardSize, _color);\n  }\n\n  render() {\n    const _this$state4 = this.state,\n          playerScore = _this$state4.playerScore,\n          snakeIndex = _this$state4.snakeIndex;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, React.createElement(Board, {\n      dimension: this.state.size.board,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, React.createElement(Food, {\n      key: snakeIndex,\n      size: this.state.size.player,\n      position: this.state.position.snake[0],\n      food: this.state.position.food,\n      onCollide: this.handlePlayerCollision,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }), this.state.gameOver === true && React.createElement(\"gameOver\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }, React.createElement(Modal.Dialog, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      closeButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }, \"Game Over\")), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, \"Player Score: \", playerScore)), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"secondary\",\n      onClick: this.resetGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }, \"Restart\"), React.createElement(Button, {\n      variant: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, \"Close\")))), this.state.position.snake.map(snake => React.createElement(Snake, {\n      key: snakeIndex,\n      info: snake //   playerPosition={playerPos}\n      ,\n      handleSnakePositions: this.handleSnakePositions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }))));\n  }\n\n  componentDidMount() {\n    this.startGame(); //  this.fetchGlobalHighScore();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.state.gameInterval);\n    clearInterval(this.state.snakeInterval);\n    clearInterval(this.state.timeInterval);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/tanya/study/snakes/app/src/Game.js"],"names":["React","Component","PropTypes","Snake","Food","Board","DebugState","UP","DOWN","LEFT","RIGHT","pluck","Button","Modal","_","getDefaultState","boardSize","color","size","board","player","position","food","top","Math","floor","random","left","snake","dir","snakeSpeed","timeElapsed","snakeIndex","playerScore","baseScore","gameOver","Game","constructor","props","handlePlayerCollision","state","newSnake","increaseSnakeSize","setState","concat","handleDebugToggle","debug","checked","console","log","key","length","startGame","snakeInterval","setInterval","updateSnakePositions","timeInterval","updateGame","updateTimeAndScore","incrementSnakeSpeed","parseFloat","toFixed","clearInterval","gameInterval","resetGame","highScore","globalHighScore","updateGlobalHighScore","filter","remove","map","enemy","inRange","handleSnakePositions","dirObj","snakes","dump","Object","assign","i","render","componentDidMount","componentWillUnmount"],"mappings":"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","sourcesContent":["import React ,{ Component, PropTypes } from 'react';\nimport  Snake  from './components/Snake';\nimport  Food  from './components/Food';\nimport Board  from './components/Board';\nimport DebugState  from './components/DebugState';\nimport { UP, DOWN, LEFT, RIGHT } from './helpers/constants';\nimport { pluck } from './helpers/util';\nimport { Button ,Modal} from 'react-bootstrap';\nimport _ from 'lodash';\n\nconst getDefaultState=(boardSize,color)=>{\n   \n    return {\n        size: {\n            board: boardSize,\n            player: 10,\n        },\n        position:{\n\n            food:{\n            top:Math.floor(Math.random()*(boardSize-10)),\n            left:Math.floor(Math.random()*(boardSize-10)),\n            color:'red'\n            },\n            snake:[{\n                top:10,\n                left:10,\n                dir:RIGHT,\n                color:color\n            }]\n        },\n        snakeSpeed:1,\n        timeElapsed:0,\n        snakeIndex:0,\n        playerScore: 0,\n        baseScore:10,\n        gameOver:false,\n        \n\n    }\n}\n\n\n\nclass Game extends Component{\nconstructor(props){\n    super(props);\n    const {boardSize,color}= props;\n    this.state=getDefaultState(boardSize,color);\n}\n\n\n\nhandlePlayerCollision = () => {\n    const position=this.state.position.snake;\n    const newSnake = this.increaseSnakeSize(position);\n\n    this.setState({\n        size:{\n            ...this.state.size,\n            player:this.state.size.player\n        },\n        position: {\n            food:{\n                top:Math.floor(Math.random()*(this.state.size.board-10)),\n                left:Math.floor(Math.random()*(this.state.size.board-10)),\n                color:'red'\n                },\n            snake: [...this.state.position.snake].concat(newSnake)\n        }\n    });\n}\n\nhandleDebugToggle = () => {\n    this.setState({\n        debug: this.debug.checked\n    });\n}\n\nincreaseSnakeSize=(position)=>{\n    console.log('increse snake size',this.state)\n    this.setState({\n        snakeIndex: this.state.snakeIndex + 1\n    });\n\n    const newSnake = { \n        key: this.state.snakeIndex,\n        dir:position[position.length-1].dir,\n        color:'red',\n    };\n\n    const {  player } = this.state.size;\n    const snake=position[position.length-1];\n\n    switch(snake.dir) {\n        case UP:\n            newSnake.top = snake.top+player;\n            newSnake.left = snake.left;\n            break;\n        case DOWN:\n        newSnake.top = snake.top - player;\n        newSnake.left = snake.left;\n            break; \n        case LEFT:\n        newSnake.top = snake.top;\n        newSnake.left = snake.left+player;\n            break;\n        case RIGHT:\n        newSnake.top = snake.top;\n        newSnake.left = snake.left - player;\n            break;\n            default:\n            break;\n    }\n\n    return newSnake;\n}\n\n\nstartGame=()=>{\n   this.snakeInterval = setInterval(this.updateSnakePositions, 50);\n   this.timeInterval = setInterval(this.updateGame, 1000);\n\n}\n\nupdateGame=()=>{\n    const { timeElapsed } = this.state;\n    this.updateTimeAndScore();\n    if(timeElapsed>0){\n        if (timeElapsed % 3 === 0) {\n            this.incrementSnakeSpeed();\n        }\n    }\n}\nupdateTimeAndScore = () => {\n    const { timeElapsed ,playerScore, baseScore} = this.state;\n\n    this.setState({\n        timeElapsed: timeElapsed + 1,\n       playerScore: playerScore + baseScore,\n    });\n}\n\nincrementSnakeSpeed=()=>{\n   const { snakeSpeed } =this.state;\n    this.setState({\n        snakeSpeed:parseFloat((snakeSpeed + 0.25).toFixed(2))\n    })\n}\n\ngameOver=()=>{\n    clearInterval(this.gameInterval); \n    clearInterval(this.snakeInterval);\n    clearInterval(this.timeInterval);\n\n    this.setState({\n        gameOver:true,\n    });\n    \n}\n\nresetGame = () => {\n    const { boardSize,color } = this.props;\n    const { playerScore, highScore, globalHighScore, debug } = this.state;\n    \n    // clear intervals\n    clearInterval(this.gameInterval); \n    clearInterval(this.snakeInterval);\n    clearInterval(this.timeInterval);\n\n    // if high score is higher than global high score, update it\n    if (playerScore > globalHighScore) {\n        this.updateGlobalHighScore(playerScore);\n    }\n\n    // reset state\n    this.setState({\n        ...getDefaultState( boardSize,color ),\n        // persist debug state and high scores\n        debug,\n        highScore: playerScore > highScore ? playerScore : highScore,\n        globalHighScore\n    });\n    // restart game\n    this.startGame();\n\n}\nupdateSnakePositions=()=>{\n \n const { snakeSpeed, position: { snake }}= this.state;\n\n //const board=size.board.boardSize;\n \n        this.setState({\n            position: {\n                ...this.state.position,\n                snake: snake.filter(snake => !snake.remove).map(snake => {\n                    if (snake.top < (0 - snake.top) || \n                        snake.top > 300 + snake.top || \n                        snake.left < (0 - snake.top) || \n                        snake.left > 300 + snake.top ) {\n                        snake.remove = true;\n                        return enemy;\n                    }\n\n                    // based on direction, increment the correct value (top / left)\n                    switch(snake.dir) {\n                        case UP:\n                       snake.top = snake.top-snakeSpeed;\n                        if (_.inRange(snake.top,-10,0)){\n                            \n                            this.gameOver();\n                        }\n                        break;\n                    case DOWN:\n                    snake.top = snake.top+snakeSpeed;\n                    if (_.inRange(snake.top,this.state.size.board-10,this.state.size.board)){\n                        this.gameOver();\n                    }\n                        break;\n                    case LEFT:\n                    snake.left = snake.left-snakeSpeed;\n                    if (_.inRange(snake.left,-10,0)){\n                        this.gameOver();\n                    }\n                        break;\n                    case RIGHT:\n                    snake.left = snake.left+snakeSpeed;\n                    if (_.inRange(snake.left,this.state.size.board-10,this.state.size.board)){\n                        this.gameOver();\n                    }\n                        break;\n                        default:\n                         break;\n                    }\n                    return snake;\n                \n                  })\n                \n         \n            }\n        \n        });\n       \n    }\nhandleSnakePositions=(dirObj)=>{\n var snakes=[...this.state.position.snake]\n\n\n if(dirObj.dir !==snakes[0].dir){\n              switch(dirObj.dir) {\n                case UP:\n                if (snakes[0].dir === DOWN){\n                    let dump=Object.assign({},snakes[0]);\n                    snakes[0].top=snakes[snakes.length-1].top;\n                    snakes[0].left=snakes[snakes.length-1].left;\n                    snakes[snakes.length-1].left=dump.left;\n                    snakes[snakes.length-1].top=dump.top;\n\n                }else if((snakes[0].dir===LEFT )){\n                   for(let i=1;i<snakes.length;i++){\n                       snakes[i].top=snakes[i].top+i*10;\n                       snakes[i].left=snakes[i].left-i*10;\n                   }\n                }else if(snakes[0].dir===RIGHT){\n                    for(let i=1;i<snakes.length;i++){\n                        snakes[i].top=snakes[i].top+i*10;\n                        snakes[i].left=snakes[i].left+i*10;\n                    }\n                }\n                break;\n                case DOWN:\n                if (snakes[0].dir=== UP){\n                    let dump=Object.assign({},snakes[0]);\n                    snakes[0].top=snakes[snakes.length-1].top;\n                    snakes[0].left=snakes[snakes.length-1].left;\n                    snakes[snakes.length-1].left=dump.left;\n                    snakes[snakes.length-1].top=dump.top;\n                }else if((snakes[0].dir===LEFT )){\n                    for(let i=1;i<snakes.length;i++){\n                        snakes[i].top=snakes[i].top-i*10;\n                        snakes[i].left=snakes[i].left-i*10;\n                    }\n                }else if(snakes[0].dir===RIGHT){\n                    for(let i=1;i<snakes.length;i++){\n                        snakes[i].top=snakes[i].top-i*10;\n                        snakes[i].left=snakes[i].left+i*10;\n                    }\n                }\n                break;\n                case LEFT:  \n                if (snakes[0].dir === RIGHT){\n                    let dump=Object.assign({},snakes[0]);\n                    snakes[0].top=snakes[snakes.length-1].top;\n                    snakes[0].left=snakes[snakes.length-1].left;\n                    snakes[snakes.length-1].left=dump.left;\n                    snakes[snakes.length-1].top=dump.top;\n                }else if((snakes[0].dir===UP )){\n                    for(let i=1;i<snakes.length;i++){\n                        snakes[i].top=snakes[i].top-i*10;\n                        snakes[i].left=snakes[i].left+i*10;\n                    }\n                }else if(snakes[0].dir===DOWN){\n                    for(let i=1;i<snakes.length;i++){\n                        snakes[i].top=snakes[i].top+i*10;\n                        snakes[i].left=snakes[i].left+i*10;\n                    }\n                }\n                break;\n                case RIGHT:\n                if (snakes[0].dir === LEFT){\n                    let dump=Object.assign({},snakes[0]);\n                    snakes[0].top=snakes[snakes.length-1].top;\n                    snakes[0].left=snakes[snakes.length-1].left;\n                    snakes[snakes.length-1].left=dump.left;\n                    snakes[snakes.length-1].top=dump.top;\n                }else if((snakes[0].dir===UP )){\n                    for(let i=1;i<snakes.length;i++){\n                        snakes[i].top=snakes[i].top-i*10;\n                        snakes[i].left=snakes[i].left-i*10;\n                    }\n                }else if(snakes[0].dir===DOWN){\n                    for(let i=1;i<snakes.length;i++){\n                        snakes[i].top=snakes[i].top+i*10;\n                        snakes[i].left=snakes[i].left-i*10;\n                    }\n                }\n                break;\n                default:\n                  break;\n                }\n            }\n\n\n        this.setState({\n            position: {\n                ...this.state.position,\n                snake:snakes.map(snake => {\n                    snake.top= (snake.top) + (1*dirObj.top);\n                    snake.left= (snake.left) + ( 1*dirObj.left);\n                    snake.dir=dirObj.dir;\n                    return snake;\n                \n                  })\n                \n         \n            }\n        \n        });\n       \n    }\n    render(){\n      \n        const { \n            playerScore,\n            snakeIndex\n            //highScore,\n            //globalHighScore\n        } = this.state;\n        return (\n            <div>  \n                 <Board dimension={this.state.size.board}>\n\n                 <Food key={snakeIndex}\n                 size={this.state.size.player}\n                 position={this.state.position.snake[0]} \n                 food={this.state.position.food}\n                 onCollide={this.handlePlayerCollision}/>\n\n                 {(this.state.gameOver === true )&&\n                 <gameOver>\n                    <Modal.Dialog>\n                        <Modal.Header closeButton>\n                            <Modal.Title>Game Over</Modal.Title>\n                        </Modal.Header>\n\n                        <Modal.Body>\n                            <p>Player Score: {playerScore}</p>\n                        </Modal.Body>\n\n                        <Modal.Footer>\n                            <Button variant=\"secondary\" onClick={this.resetGame}>Restart</Button>\n                            <Button variant=\"primary\">Close</Button>\n                        </Modal.Footer>\n                        </Modal.Dialog>\n                 </gameOver>\n                 }\n\n                  {\n                  this.state.position.snake.map(snake => \n                 <Snake key={snakeIndex}\n                  info={snake}\n                //   playerPosition={playerPos}\n                  handleSnakePositions={this.handleSnakePositions} \n                   />\n                  )\n                  }\n\n                  </Board>\n\n                {/* {false && <p style={{ position: 'fixed', bottom: 0, left: 16 }}>Debug: <input type=\"checkbox\" onChange={this.handleDebugToggle} ref={ n => this.debug = n }/></p>}\n                {this.state.debug && <DebugState data={this.state} />} */}\n            </div>\n            \n        )\n    }\n    componentDidMount() {\n        this.startGame();\n      //  this.fetchGlobalHighScore();\n    }\n\n    componentWillUnmount() {\n       clearInterval(this.state.gameInterval);\n        clearInterval(this.state.snakeInterval);\n        clearInterval(this.state.timeInterval);\n    }\n}\nexport default Game;"]},"metadata":{},"sourceType":"module"}