{"ast":null,"code":"import _objectSpread from \"/Users/tanya/study/snakes/app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/tanya/study/snakes/app/src/Game.js\";\nimport React, { Component } from 'react';\nimport Snake from './components/Snake';\nimport Food from './components/Food';\nimport Board from './components/Board';\nimport GameInfo from './components/GameInfo';\nimport { UP, DOWN, LEFT, RIGHT } from './helpers/constants';\nimport { Button, Modal } from 'react-bootstrap';\nimport _ from 'lodash';\n\nconst getDefaultState = (boardSize, color) => {\n  return {\n    size: {\n      board: boardSize,\n      player: 10\n    },\n    position: {\n      food: {\n        top: Math.floor(Math.random() * (boardSize - 10)),\n        left: Math.floor(Math.random() * (boardSize - 10)),\n        color: 'red'\n      },\n      snake: [{\n        top: 10,\n        left: 10,\n        dir: RIGHT,\n        color: color\n      }]\n    },\n    snakeSpeed: 1,\n    timeElapsed: 0,\n    snakeIndex: 0,\n    playerScore: 0,\n    baseScore: 10,\n    gameOver: false\n  };\n};\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSnakeCollision = () => {\n      const position = this.state.position.snake;\n      const _this$state = this.state,\n            playerScore = _this$state.playerScore,\n            baseScore = _this$state.baseScore;\n      const newSnake = this.increaseSnakeSize(position);\n      this.setState({\n        size: _objectSpread({}, this.state.size, {\n          player: this.state.size.player\n        }),\n        position: {\n          food: {\n            top: Math.floor(Math.random() * (this.state.size.board - 10)),\n            left: Math.floor(Math.random() * (this.state.size.board - 10)),\n            color: 'red'\n          },\n          snake: [...this.state.position.snake].concat(newSnake)\n        },\n        playerScore: playerScore + baseScore\n      });\n    };\n\n    this.handleDebugToggle = () => {\n      this.setState({\n        debug: this.debug.checked\n      });\n    };\n\n    this.increaseSnakeSize = position => {\n      this.setState({\n        snakeIndex: this.state.snakeIndex + 1\n      });\n      const newSnake = {\n        key: this.state.snakeIndex,\n        dir: position[position.length - 1].dir,\n        color: 'red'\n      };\n      const player = this.state.size.player;\n      const snake = position[position.length - 1];\n\n      switch (snake.dir) {\n        case UP:\n          newSnake.top = snake.top + player;\n          newSnake.left = snake.left;\n          break;\n\n        case DOWN:\n          newSnake.top = snake.top - player;\n          newSnake.left = snake.left;\n          break;\n\n        case LEFT:\n          newSnake.top = snake.top;\n          newSnake.left = snake.left + player;\n          break;\n\n        case RIGHT:\n          newSnake.top = snake.top;\n          newSnake.left = snake.left - player;\n          break;\n\n        default:\n          break;\n      }\n\n      return newSnake;\n    };\n\n    this.startGame = () => {\n      this.snakeInterval = setInterval(this.updateSnakePositions, 50);\n      this.timeInterval = setInterval(this.updateGame, 1000);\n    };\n\n    this.updateGame = () => {\n      const timeElapsed = this.state.timeElapsed;\n      this.updateTimeAndScore();\n\n      if (timeElapsed > 0) {\n        if (timeElapsed % 3 === 0) {\n          this.incrementSnakeSpeed();\n        }\n      }\n    };\n\n    this.updateTimeAndScore = () => {\n      const _this$state2 = this.state,\n            timeElapsed = _this$state2.timeElapsed,\n            playerScore = _this$state2.playerScore,\n            baseScore = _this$state2.baseScore;\n      this.setState({\n        timeElapsed: timeElapsed + 1\n      });\n    };\n\n    this.incrementSnakeSpeed = () => {\n      const snakeSpeed = this.state.snakeSpeed;\n      this.setState({\n        snakeSpeed: parseFloat((snakeSpeed + 0.25).toFixed(2))\n      });\n    };\n\n    this.gameOver = () => {\n      this.setState({\n        gameOver: true\n      });\n    };\n\n    this.resetGame = () => {\n      const _this$props = this.props,\n            boardSize = _this$props.boardSize,\n            color = _this$props.color;\n      const _this$state3 = this.state,\n            playerScore = _this$state3.playerScore,\n            highScore = _this$state3.highScore,\n            globalHighScore = _this$state3.globalHighScore,\n            debug = _this$state3.debug; // clear intervals\n\n      clearInterval(this.gameInterval);\n      clearInterval(this.snakeInterval);\n      clearInterval(this.timeInterval); // if high score is higher than global high score, update it\n\n      if (playerScore > globalHighScore) {\n        this.updateGlobalHighScore(playerScore);\n      } // reset state\n\n\n      this.setState(_objectSpread({}, getDefaultState(boardSize, color), {\n        // persist debug state and high scores\n        debug,\n        highScore: playerScore > highScore ? playerScore : highScore,\n        globalHighScore\n      })); // restart game\n\n      this.startGame();\n    };\n\n    this.updateSnakePositions = () => {\n      const _this$state4 = this.state,\n            snakeSpeed = _this$state4.snakeSpeed,\n            snake = _this$state4.position.snake;\n      this.setState({\n        position: _objectSpread({}, this.state.position, {\n          snake: snake.map(snake => {\n            if (_.inRange(snake.top, -10, 0) || _.inRange(snake.top, this.state.size.board - 10, this.state.size.board) || _.inRange(snake.left, this.state.size.board - 10, this.state.size.board) || _.inRange(snake.left, -10, 0)) {\n              this.gameOver();\n            } // based on direction, increment the correct value (top / left)\n\n\n            switch (snake.dir) {\n              case UP:\n                snake.top = snake.top - snakeSpeed;\n                break;\n\n              case DOWN:\n                snake.top = snake.top + snakeSpeed;\n                break;\n\n              case LEFT:\n                snake.left = snake.left - snakeSpeed;\n                break;\n\n              case RIGHT:\n                snake.left = snake.left + snakeSpeed;\n                break;\n            }\n\n            return snake;\n          })\n        })\n      });\n    };\n\n    this.handleSnakePositions = dirObj => {\n      var snakes = [...this.state.position.snake];\n\n      if (dirObj.dir !== snakes[0].dir) {\n        switch (dirObj.dir) {\n          case UP:\n            if (snakes[0].dir === DOWN) {\n              let dump = Object.assign({}, snakes[0]);\n              snakes[0].top = snakes[snakes.length - 1].top;\n              snakes[0].left = snakes[snakes.length - 1].left;\n              snakes[snakes.length - 1].left = dump.left;\n              snakes[snakes.length - 1].top = dump.top;\n            } else if (snakes[0].dir === LEFT) {\n              for (let i = 1; i < snakes.length; i++) {\n                snakes[i].top = snakes[i].top + i * 10;\n                snakes[i].left = snakes[i].left - i * 10;\n              }\n            } else if (snakes[0].dir === RIGHT) {\n              for (let i = 1; i < snakes.length; i++) {\n                snakes[i].top = snakes[i].top + i * 10;\n                snakes[i].left = snakes[i].left + i * 10;\n              }\n            }\n\n            break;\n\n          case DOWN:\n            if (snakes[0].dir === UP) {\n              let dump = Object.assign({}, snakes[0]);\n              snakes[0].top = snakes[snakes.length - 1].top;\n              snakes[0].left = snakes[snakes.length - 1].left;\n              snakes[snakes.length - 1].left = dump.left;\n              snakes[snakes.length - 1].top = dump.top;\n            } else if (snakes[0].dir === LEFT) {\n              for (let i = 1; i < snakes.length; i++) {\n                snakes[i].top = snakes[i].top - i * 10;\n                snakes[i].left = snakes[i].left - i * 10;\n              }\n            } else if (snakes[0].dir === RIGHT) {\n              for (let i = 1; i < snakes.length; i++) {\n                snakes[i].top = snakes[i].top - i * 10;\n                snakes[i].left = snakes[i].left + i * 10;\n              }\n            }\n\n            break;\n\n          case LEFT:\n            if (snakes[0].dir === RIGHT) {\n              let dump = Object.assign({}, snakes[0]);\n              snakes[0].top = snakes[snakes.length - 1].top;\n              snakes[0].left = snakes[snakes.length - 1].left;\n              snakes[snakes.length - 1].left = dump.left;\n              snakes[snakes.length - 1].top = dump.top;\n            } else if (snakes[0].dir === UP) {\n              for (let i = 1; i < snakes.length; i++) {\n                snakes[i].top = snakes[i].top - i * 10;\n                snakes[i].left = snakes[i].left + i * 10;\n              }\n            } else if (snakes[0].dir === DOWN) {\n              for (let i = 1; i < snakes.length; i++) {\n                snakes[i].top = snakes[i].top + i * 10;\n                snakes[i].left = snakes[i].left + i * 10;\n              }\n            }\n\n            break;\n\n          case RIGHT:\n            if (snakes[0].dir === LEFT) {\n              let dump = Object.assign({}, snakes[0]);\n              snakes[0].top = snakes[snakes.length - 1].top;\n              snakes[0].left = snakes[snakes.length - 1].left;\n              snakes[snakes.length - 1].left = dump.left;\n              snakes[snakes.length - 1].top = dump.top;\n            } else if (snakes[0].dir === UP) {\n              for (let i = 1; i < snakes.length; i++) {\n                snakes[i].top = snakes[i].top - i * 10;\n                snakes[i].left = snakes[i].left - i * 10;\n              }\n            } else if (snakes[0].dir === DOWN) {\n              for (let i = 1; i < snakes.length; i++) {\n                snakes[i].top = snakes[i].top + i * 10;\n                snakes[i].left = snakes[i].left - i * 10;\n              }\n            }\n\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      this.setState({\n        position: _objectSpread({}, this.state.position, {\n          snake: snakes.map(snake => {\n            snake.top = snake.top + 1 * dirObj.top;\n            snake.left = snake.left + 1 * dirObj.left;\n            snake.dir = dirObj.dir;\n            return snake;\n          })\n        })\n      });\n    };\n\n    this.style = () => {\n      return {\n        width: '85%',\n        maxWidth: '600px',\n        margin: '0 auto'\n      };\n    };\n\n    const _boardSize = props.boardSize,\n          _color = props.color;\n    this.state = getDefaultState(_boardSize, _color);\n  }\n\n  render() {\n    const _this$state5 = this.state,\n          playerScore = _this$state5.playerScore,\n          snakeIndex = _this$state5.snakeIndex,\n          timeElapsed = _this$state5.timeElapsed,\n          highScore = _this$state5.highScore,\n          globalHighScore = _this$state5.globalHighScore;\n    return React.createElement(\"div\", {\n      style: this.style(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, React.createElement(GameInfo, {\n      playerScore: playerScore,\n      timeElapsed: timeElapsed,\n      highScore: highScore,\n      globalHighScore: globalHighScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }), React.createElement(Board, {\n      dimension: this.state.size.board,\n      key: snakeIndex,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, React.createElement(Food, {\n      key: snakeIndex,\n      size: this.state.size.player,\n      position: this.state.position.snake[0],\n      food: this.state.position.food,\n      onCollide: this.handleSnakeCollision,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }), this.state.gameOver === true && React.createElement(Modal.Dialog, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      closeButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }, \"Game Over\")), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, \"Player Score: \", playerScore)), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"secondary\",\n      onClick: this.resetGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, \"Restart\"), React.createElement(Button, {\n      variant: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }, \"Close\"))), this.state.position.snake.map(snake => React.createElement(Snake, {\n      key: snakeIndex,\n      info: snake //   playerPosition={playerPos}\n      ,\n      handleSnakePositions: this.handleSnakePositions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }))));\n  }\n\n  componentDidMount() {\n    this.startGame();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.state.gameInterval);\n    clearInterval(this.state.snakeInterval);\n    clearInterval(this.state.timeInterval);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/tanya/study/snakes/app/src/Game.js"],"names":["React","Component","Snake","Food","Board","GameInfo","UP","DOWN","LEFT","RIGHT","Button","Modal","_","getDefaultState","boardSize","color","size","board","player","position","food","top","Math","floor","random","left","snake","dir","snakeSpeed","timeElapsed","snakeIndex","playerScore","baseScore","gameOver","Game","constructor","props","handleSnakeCollision","state","newSnake","increaseSnakeSize","setState","concat","handleDebugToggle","debug","checked","key","length","startGame","snakeInterval","setInterval","updateSnakePositions","timeInterval","updateGame","updateTimeAndScore","incrementSnakeSpeed","parseFloat","toFixed","resetGame","highScore","globalHighScore","clearInterval","gameInterval","updateGlobalHighScore","map","inRange","handleSnakePositions","dirObj","snakes","dump","Object","assign","i","style","width","maxWidth","margin","render","componentDidMount","componentWillUnmount"],"mappings":"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","sourcesContent":["import React ,{ Component } from 'react';\nimport  Snake  from './components/Snake';\nimport  Food  from './components/Food';\nimport Board  from './components/Board';\nimport GameInfo  from './components/GameInfo';\nimport { UP, DOWN, LEFT, RIGHT } from './helpers/constants';\nimport { Button ,Modal} from 'react-bootstrap';\nimport _ from 'lodash';\n\nconst getDefaultState=(boardSize,color)=>{\n   \n    return {\n        size: {\n            board: boardSize,\n            player: 10,\n        },\n        position:{\n\n            food:{\n            top:Math.floor(Math.random()*(boardSize-10)),\n            left:Math.floor(Math.random()*(boardSize-10)),\n            color:'red'\n            },\n            snake:[{\n                top:10,\n                left:10,\n                dir:RIGHT,\n                color:color\n            }]\n        },\n        snakeSpeed:1,\n        timeElapsed:0,\n        snakeIndex:0,\n        playerScore: 0,\n        baseScore:10,\n        gameOver:false,\n        \n\n    }\n}\n\n\n\nclass Game extends Component{\nconstructor(props){\n    super(props);\n    const {boardSize,color}= props;\n    this.state=getDefaultState(boardSize,color);\n}\n\n\n\nhandleSnakeCollision = () => {\n    const position=this.state.position.snake;\n    const {playerScore,baseScore}=this.state\n    const newSnake = this.increaseSnakeSize(position);\n\n    this.setState({\n        size:{\n            ...this.state.size,\n            player:this.state.size.player\n        },\n        position: {\n            food:{\n                top:Math.floor(Math.random()*(this.state.size.board-10)),\n                left:Math.floor(Math.random()*(this.state.size.board-10)),\n                color:'red'\n                },\n            snake: [...this.state.position.snake].concat(newSnake)\n        },\n        playerScore: playerScore + baseScore,\n    });\n}\n\nhandleDebugToggle = () => {\n    this.setState({\n        debug: this.debug.checked\n    });\n}\n\nincreaseSnakeSize=(position)=>{\n    this.setState({\n        snakeIndex: this.state.snakeIndex + 1\n    });\n\n    const newSnake = { \n        key: this.state.snakeIndex,\n        dir:position[position.length-1].dir,\n        color:'red',\n    };\n\n    const {  player } = this.state.size;\n    const snake=position[position.length-1];\n\n    switch(snake.dir) {\n        case UP:\n            newSnake.top = snake.top+player;\n            newSnake.left = snake.left;\n            break;\n        case DOWN:\n        newSnake.top = snake.top - player;\n        newSnake.left = snake.left;\n            break; \n        case LEFT:\n        newSnake.top = snake.top;\n        newSnake.left = snake.left+player;\n            break;\n        case RIGHT:\n        newSnake.top = snake.top;\n        newSnake.left = snake.left - player;\n            break;\n            default:\n            break;\n    }\n\n    return newSnake;\n}\n\n\nstartGame=()=>{\n   this.snakeInterval = setInterval(this.updateSnakePositions, 50);\n   this.timeInterval = setInterval(this.updateGame, 1000);\n\n}\n\nupdateGame=()=>{\n    const { timeElapsed } = this.state;\n    this.updateTimeAndScore();\n    if(timeElapsed>0){\n        if (timeElapsed % 3 === 0) {\n            this.incrementSnakeSpeed();\n        }\n    }\n}\nupdateTimeAndScore = () => {\n    const { timeElapsed ,playerScore, baseScore} = this.state;\n\n    this.setState({\n        timeElapsed: timeElapsed + 1,\n    });\n}\n\nincrementSnakeSpeed=()=>{\n   const { snakeSpeed } =this.state;\n    this.setState({\n        snakeSpeed:parseFloat((snakeSpeed + 0.25).toFixed(2))\n    })\n}\n\ngameOver=()=>{\n    this.setState({\n        gameOver:true,\n    });\n    \n}\n\nresetGame = () => {\n    const { boardSize,color } = this.props;\n    const { playerScore, highScore, globalHighScore, debug } = this.state;\n    \n    // clear intervals\n    clearInterval(this.gameInterval); \n    clearInterval(this.snakeInterval);\n    clearInterval(this.timeInterval);\n   \n    // if high score is higher than global high score, update it\n    if (playerScore > globalHighScore) {\n        this.updateGlobalHighScore(playerScore);\n    }\n\n    // reset state\n    this.setState({\n        ...getDefaultState( boardSize,color ),\n        // persist debug state and high scores\n        debug,\n        highScore: playerScore > highScore ? playerScore : highScore,\n        globalHighScore\n    });\n    // restart game\n    this.startGame();\n\n}\nupdateSnakePositions=()=>{\n \n const { snakeSpeed, position: { snake }}= this.state; \n        this.setState({\n            position: {\n                ...this.state.position,\n                snake: snake.map(snake => {\n\n                    if((_.inRange(snake.top,-10,0))||\n                    (_.inRange(snake.top,this.state.size.board-10,this.state.size.board))||\n                    (_.inRange(snake.left,this.state.size.board-10,this.state.size.board))||\n                    (_.inRange(snake.left,-10,0))){\n                        this.gameOver();\n                    }\n\n                    // based on direction, increment the correct value (top / left)\n                    switch(snake.dir) {\n                        case UP:\n                       snake.top = snake.top-snakeSpeed;\n                        break;\n                        case DOWN:\n                        snake.top = snake.top+snakeSpeed;\n                            break;\n                        case LEFT:\n                        snake.left = snake.left-snakeSpeed;\n                            break;\n                        case RIGHT:\n                        snake.left = snake.left+snakeSpeed;\n                       \n                            break;\n                        }\n                            return snake;\n                    \n                    })\n            }\n        \n        });\n       \n    }\nhandleSnakePositions=(dirObj)=>{\n var snakes=[...this.state.position.snake]\n\n\n if(dirObj.dir !==snakes[0].dir){\n              switch(dirObj.dir) {\n                case UP:\n                if (snakes[0].dir === DOWN){\n                    let dump=Object.assign({},snakes[0]);\n                    snakes[0].top=snakes[snakes.length-1].top;\n                    snakes[0].left=snakes[snakes.length-1].left;\n                    snakes[snakes.length-1].left=dump.left;\n                    snakes[snakes.length-1].top=dump.top;\n\n                }else if((snakes[0].dir===LEFT )){\n                   for(let i=1;i<snakes.length;i++){\n                       snakes[i].top=snakes[i].top+i*10;\n                       snakes[i].left=snakes[i].left-i*10;\n                   }\n                }else if(snakes[0].dir===RIGHT){\n                    for(let i=1;i<snakes.length;i++){\n                        snakes[i].top=snakes[i].top+i*10;\n                        snakes[i].left=snakes[i].left+i*10;\n                    }\n                }\n                break;\n                case DOWN:\n                if (snakes[0].dir=== UP){\n                    let dump=Object.assign({},snakes[0]);\n                    snakes[0].top=snakes[snakes.length-1].top;\n                    snakes[0].left=snakes[snakes.length-1].left;\n                    snakes[snakes.length-1].left=dump.left;\n                    snakes[snakes.length-1].top=dump.top;\n                }else if((snakes[0].dir===LEFT )){\n                    for(let i=1;i<snakes.length;i++){\n                        snakes[i].top=snakes[i].top-i*10;\n                        snakes[i].left=snakes[i].left-i*10;\n                    }\n                }else if(snakes[0].dir===RIGHT){\n                    for(let i=1;i<snakes.length;i++){\n                        snakes[i].top=snakes[i].top-i*10;\n                        snakes[i].left=snakes[i].left+i*10;\n                    }\n                }\n                break;\n                case LEFT:  \n                if (snakes[0].dir === RIGHT){\n                    let dump=Object.assign({},snakes[0]);\n                    snakes[0].top=snakes[snakes.length-1].top;\n                    snakes[0].left=snakes[snakes.length-1].left;\n                    snakes[snakes.length-1].left=dump.left;\n                    snakes[snakes.length-1].top=dump.top;\n                }else if((snakes[0].dir===UP )){\n                    for(let i=1;i<snakes.length;i++){\n                        snakes[i].top=snakes[i].top-i*10;\n                        snakes[i].left=snakes[i].left+i*10;\n                    }\n                }else if(snakes[0].dir===DOWN){\n                    for(let i=1;i<snakes.length;i++){\n                        snakes[i].top=snakes[i].top+i*10;\n                        snakes[i].left=snakes[i].left+i*10;\n                    }\n                }\n                break;\n                case RIGHT:\n                if (snakes[0].dir === LEFT){\n                    let dump=Object.assign({},snakes[0]);\n                    snakes[0].top=snakes[snakes.length-1].top;\n                    snakes[0].left=snakes[snakes.length-1].left;\n                    snakes[snakes.length-1].left=dump.left;\n                    snakes[snakes.length-1].top=dump.top;\n                }else if((snakes[0].dir===UP )){\n                    for(let i=1;i<snakes.length;i++){\n                        snakes[i].top=snakes[i].top-i*10;\n                        snakes[i].left=snakes[i].left-i*10;\n                    }\n                }else if(snakes[0].dir===DOWN){\n                    for(let i=1;i<snakes.length;i++){\n                        snakes[i].top=snakes[i].top+i*10;\n                        snakes[i].left=snakes[i].left-i*10;\n                    }\n                }\n                break;\n                default:\n                  break;\n                }\n            }\n\n\n        this.setState({\n            position: {\n                ...this.state.position,\n                snake:snakes.map(snake => {\n                    snake.top= (snake.top) + (1*dirObj.top);\n                    snake.left= (snake.left) + ( 1*dirObj.left);\n                    snake.dir=dirObj.dir;\n                    return snake;\n                \n                  })\n            }\n        });\n       \n    }\n\n\n    style = () => {\n        return {\n            width: '85%',\n            maxWidth: '600px',\n            margin: '0 auto'\n        };\n    }\n\n    render(){\n      \n        const { \n            playerScore,\n            snakeIndex,\n            timeElapsed,\n            highScore,\n            globalHighScore\n        } = this.state;\n        return (\n            <div style={this.style()}>\n            <GameInfo \n                playerScore={playerScore} \n                timeElapsed={timeElapsed}\n               highScore={highScore}\n                globalHighScore={globalHighScore} />\n                 <Board dimension={this.state.size.board} key={snakeIndex}>\n\n                 <Food key={snakeIndex}\n                 size={this.state.size.player}\n                 position={this.state.position.snake[0]} \n                 food={this.state.position.food}\n                 onCollide={this.handleSnakeCollision}/>\n\n                 {(this.state.gameOver === true )&&\n               \n                    <Modal.Dialog>\n                        <Modal.Header closeButton>\n                            <Modal.Title>Game Over</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <p>Player Score: {playerScore}</p>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <Button variant=\"secondary\" onClick={this.resetGame}>Restart</Button>\n                            <Button variant=\"primary\">Close</Button>\n                        </Modal.Footer>\n                        </Modal.Dialog>\n                 }\n\n                  {\n                  this.state.position.snake.map(snake => \n                 <Snake key={snakeIndex}\n                  info={snake}\n                //   playerPosition={playerPos}\n                  handleSnakePositions={this.handleSnakePositions} \n                   />\n                  )\n                  }\n\n                  </Board>\n\n                {/* {false && <p style={{ position: 'fixed', bottom: 0, left: 16 }}>Debug: <input type=\"checkbox\" onChange={this.handleDebugToggle} ref={ n => this.debug = n }/></p>}\n                {this.state.debug && <DebugState data={this.state} />} */}\n            </div>\n            \n        )\n    }\n    componentDidMount() {\n        this.startGame();\n    }\n\n    componentWillUnmount() {\n       clearInterval(this.state.gameInterval);\n       clearInterval(this.state.snakeInterval);\n       clearInterval(this.state.timeInterval);\n       \n    }\n}\nexport default Game;"]},"metadata":{},"sourceType":"module"}