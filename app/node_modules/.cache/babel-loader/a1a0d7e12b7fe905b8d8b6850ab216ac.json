{"ast":null,"code":"import _objectSpread from \"/Users/tanya/study/snakes/app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/tanya/study/snakes/app/src/components/Game.js\";\nimport React, { Component, PropTypes } from 'react';\nimport Snake from './components/Snake';\nimport Board from './components/Board';\nimport { pluck } from '../util';\n\nconst getDefaultState = boardSize => {\n  return {\n    position: {\n      player: {\n        top: Math.floor(boardSize / 2),\n        left: Math.floor(boardSize / 2)\n      },\n      snake: {\n        top: 10,\n        left: 10,\n        dir: 'UP'\n      }\n    },\n    snakeSpeed: 5,\n    timeElapsed: 0,\n    snakeIndex: 0\n  };\n};\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n\n    this.placeSnake = () => {\n      const playerPos = this.state.position.player;\n      const side = pluck([UP, DOWN, LEFT, RIGHT]); // generate enemy object\n\n      const newSnake = this.increaseSnakeSize(playerPos, side);\n      this.setState(_objectSpread({}, this.state.position, {\n        snake: newSnake\n      }));\n    };\n\n    this.increaseSnakeSize = () => {\n      this.setState({\n        snakeIndex: this.state.snakeIndex + 1\n      });\n      const newSnake = {\n        key: this.state.snakeIndex,\n        dir: side,\n        top: 10,\n        left: 10\n      };\n      const _this$state$size = this.state.size,\n            maxDim = _this$state$size.maxDim,\n            player = _this$state$size.player;\n\n      switch (side) {\n        case UP:\n          newSnake.top = maxDim;\n          newSnake.left = position.left;\n          break;\n\n        case DOWN:\n          newSnake.top = 0 - player;\n          newSnake.left = position.left;\n          break;\n\n        case LEFT:\n          newSnake.top = position.top;\n          newSnake.left = maxDim;\n          break;\n\n        case RIGHT:\n          newSnake.top = position.top;\n          newSnake.left = 0 - player;\n          break;\n      }\n\n      return newSnake;\n    };\n\n    this.startGame = () => {\n      this.snakeInterval = setInterval(this.updateSnakePositions, 50);\n      this.timeInterval = setInterval(this.updateGame, 1000);\n    };\n\n    this.updateGame = () => {\n      if (timeElapsed > 0) {\n        if (timeElapsed % 3 === 0) {\n          this.incrementSnakeSpeed();\n        }\n      }\n    };\n\n    this.incrementSnakeSpeed = () => {\n      const snakeSpeed = this.state.snakeSpeed;\n      this.setState({\n        snakeSpeed: snakeSpeed + 1\n      });\n    };\n\n    this.updateSnakePositions = () => {\n      const _this$state = this.state,\n            snakeSpeed = _this$state.snakeSpeed,\n            snake = _this$state.position.snake,\n            _this$state$size2 = _this$state.size,\n            player = _this$state$size2.player,\n            maxDim = _this$state$size2.maxDim;\n      this.setState({\n        position: _objectSpread({}, this.state.position, {\n          snake: {\n            dir: () => {\n              // based on direction, increment the correct value (top / left)\n              switch (snake.dir) {\n                case UP:\n                  snake.top -= snakeSpeed;\n                  break;\n\n                case DOWN:\n                  snake.top += snakeSpeed;\n                  break;\n\n                case LEFT:\n                  snake.left -= snakeSpeed;\n                  break;\n\n                case RIGHT:\n                  snake.left += snakeSpeed;\n                  break;\n              }\n\n              return snake;\n            }\n          }\n        })\n      });\n    };\n\n    this.state = getDefaultState({\n      boardSize\n    });\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          playerPos = _this$state2.position.player,\n          timeElapsed = _this$state2.timeElapsed;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(Board, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(Snake, {\n      key: snake.key,\n      info: snake,\n      playerPosition: playerPos,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    })));\n  }\n\n  componentDidMount() {\n    this.startGame(); //  this.fetchGlobalHighScore();\n  }\n\n  componentWillUnmount() {\n    // clearInterval(this.state.gameInterval);\n    clearInterval(this.state.snakeInterval);\n    clearInterval(this.state.timeInterval);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/tanya/study/snakes/app/src/components/Game.js"],"names":["React","Component","PropTypes","Snake","Board","pluck","getDefaultState","boardSize","position","player","top","Math","floor","left","snake","dir","snakeSpeed","timeElapsed","snakeIndex","Game","constructor","props","placeSnake","playerPos","state","side","UP","DOWN","LEFT","RIGHT","newSnake","increaseSnakeSize","setState","key","size","maxDim","startGame","snakeInterval","setInterval","updateSnakePositions","timeInterval","updateGame","incrementSnakeSpeed","render","componentDidMount","componentWillUnmount","clearInterval"],"mappings":"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","sourcesContent":["import React ,{ Component, PropTypes } from 'react';\nimport  Snake  from './components/Snake';\nimport Board  from './components/Board';\nimport { pluck } from '../util';\n\n\nconst getDefaultState=(boardSize)=>{\n    return {\n        position:{\n            player:{\n            top:Math.floor(boardSize/2),\n            left:Math.floor(boardSize/2)\n            },\n            snake:{\n                top:10,\n                left:10,\n                dir:'UP',\n            }\n        },\n        snakeSpeed:5,\n        timeElapsed:0,\n        snakeIndex:0\n    }\n\n\n}\n\n\n\nclass Game extends Component{\nconstructor(props){\n    super(props);\n    this.state=getDefaultState({boardSize});\n\n}\n\n placeSnake=()=>{\n    const {player: playerPos}=this.state.position;\n    const side=pluck([UP,DOWN,LEFT,RIGHT]);\n\n    // generate enemy object\n    const newSnake = this.increaseSnakeSize(playerPos,side)\n\n    this.setState({\n        ...this.state.position,\n        snake: newSnake\n    });\n}\n\nincreaseSnakeSize=()=>{\n    this.setState({\n        snakeIndex: this.state.snakeIndex + 1\n    });\n\n    const newSnake = { key: this.state.snakeIndex, dir: side ,  top:10,left:10};\n    const { maxDim, player } = this.state.size;\n\n    switch(side) {\n        case UP:\n            newSnake.top = maxDim;\n            newSnake.left = position.left;\n            break;\n        case DOWN:\n        newSnake.top = 0 - player;\n        newSnake.left = position.left;\n            break; \n        case LEFT:\n        newSnake.top = position.top;\n        newSnake.left = maxDim;\n            break;\n        case RIGHT:\n        newSnake.top = position.top;\n        newSnake.left = 0 - player;\n            break;\n    }\n\n    return newSnake;\n}\n\n\nstartGame=()=>{\n    this.snakeInterval = setInterval(this.updateSnakePositions, 50);\n    this.timeInterval = setInterval(this.updateGame, 1000);\n\n}\n\nupdateGame=()=>{\n    if(timeElapsed>0){\n        if (timeElapsed % 3 === 0) {\n            this.incrementSnakeSpeed();\n        }\n    }\n}\n\nincrementSnakeSpeed=()=>{\n   const { snakeSpeed } =this.state;\n    this.setState({\n        snakeSpeed:snakeSpeed+1\n    })\n}\n\nupdateSnakePositions=()=>{\n\n const { snakeSpeed, position: { snake }, size: { player, maxDim }} = this.state;\n\n        this.setState({\n            position: {\n                ...this.state.position,\n                snake:  {\n                    dir:()=>{\n                    // based on direction, increment the correct value (top / left)\n                    switch(snake.dir) {\n                        case UP: \n                            snake.top -= snakeSpeed;\n                            break;\n                        case DOWN: \n                            snake.top += snakeSpeed;\n                            break;\n                        case LEFT:\n                            snake.left -= snakeSpeed;\n                            break;\n                        case RIGHT:\n                            snake.left += snakeSpeed;\n                            break;\n                    }\n\n                    return snake;\n                }\n                }\n            }\n        });\n    }\n    render(){\n        const { \n            position: { player: playerPos },\n           // playerScore,\n            timeElapsed,\n            //highScore,\n            //globalHighScore\n        } = this.state;\n        return (\n            <div>\n                 <Board >\n                 <Snake key={snake.key}\n                  info={snake}\n                 playerPosition={playerPos}/>\n                </Board>\n                \n            </div>\n            \n        )\n    }\n    componentDidMount() {\n        this.startGame();\n      //  this.fetchGlobalHighScore();\n    }\n\n    componentWillUnmount() {\n       // clearInterval(this.state.gameInterval);\n        clearInterval(this.state.snakeInterval);\n        clearInterval(this.state.timeInterval);\n    }\n}\nexport default Game;"]},"metadata":{},"sourceType":"module"}