{"ast":null,"code":"import _objectSpread from \"/Users/tanya/study/snakes/app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/tanya/study/snakes/app/src/Game.js\";\nimport React, { Component, PropTypes } from 'react';\nimport Snake from './components/Snake';\nimport Board from './components/Board';\nimport DebugState from './components/DebugState';\nimport { UP, DOWN, LEFT, RIGHT } from './helpers/constants';\nimport { pluck } from './helpers/util';\n\nconst getDefaultState = boardSize => {\n  return {\n    size: {\n      board: boardSize,\n      player: 5,\n      maxDim: 5\n    },\n    position: {\n      player: {\n        top: Math.floor(boardSize / 2),\n        left: Math.floor(boardSize / 2)\n      },\n      snake: {\n        top: 10,\n        left: 10,\n        dir: RIGHT\n      }\n    },\n    snakeSpeed: 1,\n    timeElapsed: 0,\n    snakeIndex: 0\n  };\n};\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n\n    this.placeSnake = () => {\n      const playerPos = this.state.position.player;\n      const side = pluck([UP, DOWN, LEFT, RIGHT]);\n      console.log(side); // generate snake object\n\n      const newSnake = this.increaseSnakeSize(playerPos, side);\n      this.setState(_objectSpread({}, this.state.position, {\n        snake: newSnake\n      }));\n    };\n\n    this.handleDebugToggle = () => {\n      this.setState({\n        debug: this.debug.checked\n      });\n    };\n\n    this.increaseSnakeSize = (position, side) => {\n      console.log(this.state);\n      this.setState({\n        snakeIndex: this.state.snakeIndex + 1\n      });\n      const newSnake = {\n        key: this.state.snakeIndex,\n        dir: side\n      };\n      const _this$state$size = this.state.size,\n            maxDim = _this$state$size.maxDim,\n            player = _this$state$size.player;\n\n      switch (side) {\n        case UP:\n          newSnake.top = maxDim;\n          newSnake.left = position.left;\n          break;\n\n        case DOWN:\n          newSnake.top = 0 - player;\n          newSnake.left = position.left;\n          break;\n\n        case LEFT:\n          newSnake.top = position.top;\n          newSnake.left = maxDim;\n          break;\n\n        case RIGHT:\n          newSnake.top = position.top;\n          newSnake.left = 0 - player;\n          break;\n      }\n\n      return newSnake;\n    };\n\n    this.startGame = () => {\n      console.log(this.state.position.snake.left);\n      this.snakeInterval = setInterval(this.updateSnakePositions, 50);\n      this.timeInterval = setInterval(this.updateGame, 1000);\n    };\n\n    this.updateGame = () => {\n      console.log(this.state.position.snake.left);\n      const timeElapsed = this.state.timeElapsed;\n      this.updateTimeAndScore();\n\n      if (timeElapsed > 0) {\n        if (timeElapsed % 3 === 0) {\n          this.incrementSnakeSpeed();\n        }\n      }\n    };\n\n    this.updateTimeAndScore = () => {\n      const timeElapsed = this.state.timeElapsed;\n      this.setState({\n        timeElapsed: timeElapsed + 1 //  playerScore: playerScore + baseScore,\n\n      });\n    };\n\n    this.incrementSnakeSpeed = () => {\n      const snakeSpeed = this.state.snakeSpeed;\n      this.setState({\n        snakeSpeed: parseFloat((snakeSpeed + 0.25).toFixed(2))\n      });\n    };\n\n    this.updateSnakePositions = () => {\n      console.log(this.state);\n      const _this$state = this.state,\n            snakeSpeed = _this$state.snakeSpeed,\n            snake = _this$state.position.snake;\n      this.setState({\n        position: _objectSpread({}, this.state.position, {\n          snake: function (snake) {\n            // based on direction, increment the correct value (top / left)\n            switch (snake.dir) {\n              case UP:\n                snake.top -= snakeSpeed;\n                break;\n\n              case DOWN:\n                snake.top += snakeSpeed;\n                break;\n\n              case LEFT:\n                snake.left -= snakeSpeed;\n                break;\n\n              case RIGHT:\n                snake.left += snakeSpeed;\n                break;\n            } //     if (snake.top < (0 - player) || \n            //     snake.top > maxDim + player || \n            //     snake.left < (0 - player) || \n            //     snake.left > maxDim + player ) {\n            //     snake.remove = true;\n            //     return snake;\n            // }\n\n\n            return snake;\n          }(snake)\n        })\n      });\n      console.log(this.state);\n    };\n\n    const boardSize = props.boardSize;\n    this.state = getDefaultState({\n      boardSize\n    });\n    console.log(this.state.position.snake.left);\n  }\n\n  render() {\n    console.log(this.state.position.snake.left);\n    const _this$state2 = this.state,\n          _this$state2$size = _this$state2.size,\n          board = _this$state2$size.board,\n          player = _this$state2$size.player,\n          playerPos = _this$state2.position.player,\n          timeElapsed = _this$state2.timeElapsed;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(Board, {\n      dimension: this.stateboard * player,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(Snake, {\n      key: this.state.position.snake.key,\n      info: this.state.position.snake,\n      playerPosition: playerPos,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    })));\n  }\n\n  componentDidMount() {\n    this.startGame();\n    console.log(this.state.position.snake.left); //  this.fetchGlobalHighScore();\n  }\n\n  componentWillUnmount() {\n    // clearInterval(this.state.gameInterval);\n    clearInterval(this.state.snakeInterval);\n    clearInterval(this.state.timeInterval);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/tanya/study/snakes/app/src/Game.js"],"names":["React","Component","PropTypes","Snake","Board","DebugState","UP","DOWN","LEFT","RIGHT","pluck","getDefaultState","boardSize","size","board","player","maxDim","position","top","Math","floor","left","snake","dir","snakeSpeed","timeElapsed","snakeIndex","Game","constructor","props","placeSnake","playerPos","state","side","console","log","newSnake","increaseSnakeSize","setState","handleDebugToggle","debug","checked","key","startGame","snakeInterval","setInterval","updateSnakePositions","timeInterval","updateGame","updateTimeAndScore","incrementSnakeSpeed","parseFloat","toFixed","render","stateboard","componentDidMount","componentWillUnmount","clearInterval"],"mappings":"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","sourcesContent":["import React ,{ Component, PropTypes } from 'react';\nimport  Snake  from './components/Snake';\nimport Board  from './components/Board';\nimport DebugState  from './components/DebugState';\nimport { UP, DOWN, LEFT, RIGHT } from './helpers/constants';\nimport { pluck } from './helpers/util';\n\n\nconst getDefaultState=(boardSize)=>{\n   \n    return {\n        size: {\n            board: boardSize,\n            player: 5,\n            maxDim: 5\n        },\n        position:{\n            player:{\n            top:Math.floor(boardSize/2),\n            left:Math.floor(boardSize/2)\n            },\n            snake:{\n                top:10,\n                left:10,\n                dir:RIGHT,\n            }\n        },\n        snakeSpeed:1,\n        timeElapsed:0,\n        snakeIndex:0\n    }\n\n\n}\n\n\n\nclass Game extends Component{\nconstructor(props){\n    super(props);\n    const {boardSize}= props;\n    this.state=getDefaultState({boardSize});\n    console.log(this.state.position.snake.left)\n}\n\n placeSnake=()=>{\n    \n    const {player: playerPos}=this.state.position;\n    const side=pluck([UP,DOWN,LEFT,RIGHT]);\n    console.log(side)\n\n    // generate snake object\n    const newSnake = this.increaseSnakeSize(playerPos,side)\n\n    this.setState({\n        ...this.state.position,\n        snake: newSnake\n    });\n}\nhandleDebugToggle = () => {\n    this.setState({\n        debug: this.debug.checked\n    });\n}\nincreaseSnakeSize=(position,side)=>{\n    console.log(this.state)\n    this.setState({\n        snakeIndex: this.state.snakeIndex + 1\n    });\n\n    const newSnake = { key: this.state.snakeIndex,dir:side};\n    const { maxDim, player } = this.state.size;\n\n    switch(side) {\n        case UP:\n            newSnake.top = maxDim;\n            newSnake.left = position.left;\n            break;\n        case DOWN:\n        newSnake.top = 0 - player;\n        newSnake.left = position.left;\n            break; \n        case LEFT:\n        newSnake.top = position.top;\n        newSnake.left = maxDim;\n            break;\n        case RIGHT:\n        newSnake.top = position.top;\n        newSnake.left = 0 - player;\n            break;\n    }\n\n    return newSnake;\n}\n\n\nstartGame=()=>{\n    console.log(this.state.position.snake.left)\n    this.snakeInterval = setInterval(this.updateSnakePositions, 50);\n    this.timeInterval = setInterval(this.updateGame, 1000);\n\n}\n\nupdateGame=()=>{\n    console.log(this.state.position.snake.left)\n    const { timeElapsed } = this.state;\n    this.updateTimeAndScore();\n    if(timeElapsed>0){\n        if (timeElapsed % 3 === 0) {\n            this.incrementSnakeSpeed();\n        }\n    }\n}\nupdateTimeAndScore = () => {\n    const { timeElapsed } = this.state;\n\n    this.setState({\n        timeElapsed: timeElapsed + 1,\n      //  playerScore: playerScore + baseScore,\n    });\n}\n\nincrementSnakeSpeed=()=>{\n   const { snakeSpeed } =this.state;\n    this.setState({\n        snakeSpeed:parseFloat((snakeSpeed + 0.25).toFixed(2))\n    })\n}\n\nupdateSnakePositions=()=>{\nconsole.log(this.state)\n const { snakeSpeed, position: { snake }} = this.state;\n        this.setState({\n            position: {\n                ...this.state.position,\n                snake:(function(snake){\n                    // based on direction, increment the correct value (top / left)\n                    switch(snake.dir) {\n                        case UP: \n                            snake.top -= snakeSpeed;\n                            break;\n                        case DOWN: \n                            snake.top += snakeSpeed;\n                            break;\n                        case LEFT:\n                            snake.left -= snakeSpeed;\n                            break;\n                        case RIGHT:\n                            snake.left += snakeSpeed;\n                            break;\n                    }\n\n                //     if (snake.top < (0 - player) || \n                //     snake.top > maxDim + player || \n                //     snake.left < (0 - player) || \n                //     snake.left > maxDim + player ) {\n                //     snake.remove = true;\n                //     return snake;\n                // }\n                \n                    return snake;\n                \n                  }(snake))\n                \n         \n            }\n        \n        });\n        console.log(this.state)\n    }\n    render(){\n        console.log(this.state.position.snake.left)\n        const { \n            size: { board, player }, \n            position: { player: playerPos },\n           // playerScore,\n            timeElapsed\n            //highScore,\n            //globalHighScore\n        } = this.state;\n        return (\n            <div>\n                 <Board dimension={this.stateboard*player}>\n                 <Snake key={this.state.position.snake.key}\n                  info={this.state.position.snake}\n                 playerPosition={playerPos}/>\n                </Board>\n                {/* {false && <p style={{ position: 'fixed', bottom: 0, left: 16 }}>Debug: <input type=\"checkbox\" onChange={this.handleDebugToggle} ref={ n => this.debug = n }/></p>}\n                {this.state.debug && <DebugState data={this.state} />} */}\n            </div>\n            \n        )\n    }\n    componentDidMount() {\n        this.startGame();\n        console.log(this.state.position.snake.left)\n      //  this.fetchGlobalHighScore();\n    }\n\n    componentWillUnmount() {\n       // clearInterval(this.state.gameInterval);\n        clearInterval(this.state.snakeInterval);\n        clearInterval(this.state.timeInterval);\n    }\n}\nexport default Game;"]},"metadata":{},"sourceType":"module"}