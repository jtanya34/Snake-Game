{"ast":null,"code":"import _objectSpread from \"/Users/tanya/study/snakes/app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/tanya/study/snakes/app/src/Game.js\";\nimport React, { Component, PropTypes } from 'react';\nimport Snake from './components/Snake';\nimport Food from './components/Food';\nimport Board from './components/Board';\nimport DebugState from './components/DebugState';\nimport { UP, DOWN, LEFT, RIGHT } from './helpers/constants';\nimport { pluck } from './helpers/util';\nimport { Button, Modal } from 'react-bootstrap';\n\nconst getDefaultState = boardSize => {\n  return {\n    size: {\n      board: boardSize,\n      player: 5\n    },\n    position: {\n      food: {\n        top: Math.floor(Math.random() * (boardSize.boardSize - 10)),\n        left: Math.floor(Math.random() * (boardSize.boardSize - 10))\n      },\n      snake: {\n        top: 10,\n        left: 10,\n        dir: LEFT\n      }\n    },\n    snakeSpeed: 1,\n    timeElapsed: 0,\n    snakeIndex: 0,\n    playerScore: 0,\n    baseScore: 10,\n    gameOver: false\n  };\n};\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handlePlayerCollision = () => {\n      const newSnake = this.increaseSnakeSize();\n      this.setState({\n        positions: _objectSpread({}, this.state.position, {\n          snake: [...this.state.position.snake].concat(newSnake)\n        })\n      });\n    };\n\n    this.handleDebugToggle = () => {\n      this.setState({\n        debug: this.debug.checked\n      });\n    };\n\n    this.increaseSnakeSize = (position, side) => {\n      console.log(this.state);\n      this.setState({\n        snakeIndex: this.state.snakeIndex + 1\n      });\n      const newSnake = {\n        key: this.state.snakeIndex,\n        dir: side\n      };\n      const _this$state$size = this.state.size,\n            board = _this$state$size.board,\n            player = _this$state$size.player;\n\n      switch (side) {\n        case UP:\n          newSnake.top = board;\n          newSnake.left = position.left;\n          break;\n\n        case DOWN:\n          newSnake.top = 0 - player;\n          newSnake.left = position.left;\n          break;\n\n        case LEFT:\n          newSnake.top = position.top;\n          newSnake.left = board;\n          break;\n\n        case RIGHT:\n          newSnake.top = position.top;\n          newSnake.left = 0 - player;\n          break;\n      }\n\n      return newSnake;\n    };\n\n    this.startGame = () => {\n      // this.snakeInterval = setInterval(this.handleSnakePositions, 50);\n      this.timeInterval = setInterval(this.updateGame, 1000);\n    };\n\n    this.updateGame = () => {\n      const timeElapsed = this.state.timeElapsed;\n      this.updateTimeAndScore();\n\n      if (timeElapsed > 0) {\n        if (timeElapsed % 3 === 0) {\n          this.incrementSnakeSpeed();\n        }\n      }\n    };\n\n    this.updateTimeAndScore = () => {\n      const _this$state = this.state,\n            timeElapsed = _this$state.timeElapsed,\n            playerScore = _this$state.playerScore,\n            baseScore = _this$state.baseScore;\n      this.setState({\n        timeElapsed: timeElapsed + 1,\n        playerScore: playerScore + baseScore\n      });\n    };\n\n    this.incrementSnakeSpeed = () => {\n      const snakeSpeed = this.state.snakeSpeed;\n      this.setState({\n        snakeSpeed: parseFloat((snakeSpeed + 0.25).toFixed(2))\n      });\n    };\n\n    this.gameOver = () => {\n      const gameOver = this.state.gameOver;\n      clearInterval(this.gameInterval);\n      clearInterval(this.enemyInterval);\n      clearInterval(this.timeInterval);\n      this.setState({\n        gameOver: true\n      });\n    };\n\n    this.resetGame = () => {\n      const _this$props = this.props,\n            boardSize = _this$props.boardSize,\n            playerSize = _this$props.playerSize;\n      const _this$state2 = this.state,\n            playerScore = _this$state2.playerScore,\n            highScore = _this$state2.highScore,\n            globalHighScore = _this$state2.globalHighScore,\n            debug = _this$state2.debug; // clear intervals\n\n      clearInterval(this.gameInterval);\n      clearInterval(this.enemyInterval);\n      clearInterval(this.timeInterval); // if high score is higher than global high score, update it\n\n      if (playerScore > globalHighScore) {\n        this.updateGlobalHighScore(playerScore);\n      } // reset state\n\n\n      this.setState(_objectSpread({}, getDefaultState({\n        boardSize,\n        playerSize,\n        highScore\n      }), {\n        // persist debug state and high scores\n        debug,\n        highScore: playerScore > highScore ? playerScore : highScore,\n        globalHighScore\n      })); // restart game\n\n      this.startGame();\n    };\n\n    this.handleSnakePositions = dirObj => {\n      console.log(dirObj);\n      const _this$state3 = this.state,\n            snakeSpeed = _this$state3.snakeSpeed,\n            snake = _this$state3.position.snake; //const board=size.board.boardSize;\n\n      this.setState({\n        position: _objectSpread({}, this.state.position, {\n          snake: ((snake, board) => {\n            // based on direction, increment the correct value (top / left)\n            switch (dirObj.dir) {\n              case UP:\n                snake.top -= snakeSpeed;\n\n                if (snake.top === 0) {\n                  this.gameOver();\n                }\n\n                break;\n\n              case DOWN:\n                snake.top += snakeSpeed;\n\n                if (snake.top === board) {\n                  this.gameOver();\n                }\n\n                break;\n\n              case LEFT:\n                snake.left -= snakeSpeed;\n\n                if (snake.left === 0) {\n                  this.gameOver();\n                }\n\n                break;\n\n              case RIGHT:\n                snake.left += snakeSpeed;\n\n                if (snake.left === board) {\n                  this.gameOver();\n                }\n\n                break;\n            }\n\n            snake.top = snake.top + 5 * dirObj.top;\n            snake.left = snake.left + 5 * dirObj.left;\n            return snake;\n          })(snake, this.state.size.board.boardSize)\n        })\n      });\n    };\n\n    const _boardSize = props.boardSize;\n    this.state = getDefaultState({\n      boardSize: _boardSize\n    });\n  } //  placeSnake=()=>{\n  //     const {player: playerPos}=this.state.position;\n  //     const side=pluck([UP,DOWN,LEFT,RIGHT]);\n  //     // generate snake object\n  //     const newSnake = this.increaseSnakeSize(playerPos,side)\n  //     this.setState({\n  //         ...this.state.position,\n  //         snake: newSnake\n  //     });\n  // }\n\n\n  render() {\n    const _this$state4 = this.state,\n          _this$state4$size = _this$state4.size,\n          board = _this$state4$size.board,\n          player = _this$state4$size.player,\n          playerPos = _this$state4.position.player,\n          playerScore = _this$state4.playerScore,\n          timeElapsed = _this$state4.timeElapsed;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(Board, {\n      dimension: this.state.size.board.boardSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, React.createElement(Food, {\n      food: this.state.position.food,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }), this.state.gameOver === true && React.createElement(\"gameOver\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, React.createElement(Modal.Dialog, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      closeButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, \"Game Over\")), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, \"Player Score: \", playerScore)), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"secondary\",\n      onClick: this.resetGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, \"Restart\"), React.createElement(Button, {\n      variant: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, \"Close\")))), React.createElement(Snake, {\n      key: this.state.position.snake.key,\n      info: this.state.position.snake,\n      playerPosition: playerPos,\n      handleSnakePositions: this.handleSnakePositions,\n      onCollide: this.handlePlayerCollision,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    })));\n  }\n\n  componentDidMount() {\n    this.startGame(); //  this.fetchGlobalHighScore();\n  }\n\n  componentWillUnmount() {\n    // clearInterval(this.state.gameInterval);\n    clearInterval(this.state.snakeInterval);\n    clearInterval(this.state.timeInterval);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/tanya/study/snakes/app/src/Game.js"],"names":["React","Component","PropTypes","Snake","Food","Board","DebugState","UP","DOWN","LEFT","RIGHT","pluck","Button","Modal","getDefaultState","boardSize","size","board","player","position","food","top","Math","floor","random","left","snake","dir","snakeSpeed","timeElapsed","snakeIndex","playerScore","baseScore","gameOver","Game","constructor","props","handlePlayerCollision","newSnake","increaseSnakeSize","setState","positions","state","concat","handleDebugToggle","debug","checked","side","console","log","key","startGame","timeInterval","setInterval","updateGame","updateTimeAndScore","incrementSnakeSpeed","parseFloat","toFixed","clearInterval","gameInterval","enemyInterval","resetGame","playerSize","highScore","globalHighScore","updateGlobalHighScore","handleSnakePositions","dirObj","render","playerPos","componentDidMount","componentWillUnmount","snakeInterval"],"mappings":"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","sourcesContent":["import React ,{ Component, PropTypes } from 'react';\nimport  Snake  from './components/Snake';\nimport  Food  from './components/Food';\nimport Board  from './components/Board';\nimport DebugState  from './components/DebugState';\nimport { UP, DOWN, LEFT, RIGHT } from './helpers/constants';\nimport { pluck } from './helpers/util';\nimport { Button ,Modal} from 'react-bootstrap';\n\nconst getDefaultState=(boardSize)=>{\n   \n    return {\n        size: {\n            board: boardSize,\n            player: 5,\n        },\n        position:{\n\n            food:{\n            top:Math.floor(Math.random()*(boardSize.boardSize-10)),\n            left:Math.floor(Math.random()*(boardSize.boardSize-10))\n            },\n            snake:{\n                top:10,\n                left:10,\n                dir:LEFT,\n            }\n        },\n        snakeSpeed:1,\n        timeElapsed:0,\n        snakeIndex:0,\n        playerScore: 0,\n        baseScore:10,\n        gameOver:false,\n\n    }\n}\n\n\n\nclass Game extends Component{\nconstructor(props){\n    super(props);\n    const {boardSize}= props;\n    this.state=getDefaultState({boardSize});\n}\n\n//  placeSnake=()=>{\n    \n//     const {player: playerPos}=this.state.position;\n//     const side=pluck([UP,DOWN,LEFT,RIGHT]);\n\n//     // generate snake object\n//     const newSnake = this.increaseSnakeSize(playerPos,side)\n\n//     this.setState({\n//         ...this.state.position,\n//         snake: newSnake\n//     });\n// }\n\nhandlePlayerCollision = () => {\n   const newSnake =  this.increaseSnakeSize();\n\n    this.setState({\n        positions: {\n            ...this.state.position,\n            snake: [...this.state.position.snake].concat(newSnake)\n        }\n    });\n}\n\nhandleDebugToggle = () => {\n    this.setState({\n        debug: this.debug.checked\n    });\n}\n\nincreaseSnakeSize=(position,side)=>{\n    console.log(this.state)\n    this.setState({\n        snakeIndex: this.state.snakeIndex + 1\n    });\n\n    const newSnake = { key: this.state.snakeIndex,dir:side};\n    const { board, player } = this.state.size;\n\n    switch(side) {\n        case UP:\n            newSnake.top = board;\n            newSnake.left = position.left;\n            break;\n        case DOWN:\n        newSnake.top = 0 - player;\n        newSnake.left = position.left;\n            break; \n        case LEFT:\n        newSnake.top = position.top;\n        newSnake.left = board;\n            break;\n        case RIGHT:\n        newSnake.top = position.top;\n        newSnake.left = 0 - player;\n            break;\n    }\n\n    return newSnake;\n}\n\n\nstartGame=()=>{\n   // this.snakeInterval = setInterval(this.handleSnakePositions, 50);\n    this.timeInterval = setInterval(this.updateGame, 1000);\n\n}\n\nupdateGame=()=>{\n    const { timeElapsed } = this.state;\n    this.updateTimeAndScore();\n    if(timeElapsed>0){\n        if (timeElapsed % 3 === 0) {\n            this.incrementSnakeSpeed();\n        }\n    }\n}\nupdateTimeAndScore = () => {\n    const { timeElapsed ,playerScore, baseScore} = this.state;\n\n    this.setState({\n        timeElapsed: timeElapsed + 1,\n       playerScore: playerScore + baseScore,\n    });\n}\n\nincrementSnakeSpeed=()=>{\n   const { snakeSpeed } =this.state;\n    this.setState({\n        snakeSpeed:parseFloat((snakeSpeed + 0.25).toFixed(2))\n    })\n}\n\ngameOver=()=>{\n    const { gameOver }= this.state;\n    \n    clearInterval(this.gameInterval); \n    clearInterval(this.enemyInterval);\n    clearInterval(this.timeInterval);\n\n    this.setState({\n        gameOver:true,\n    });\n    \n}\n\nresetGame = () => {\n    const { boardSize, playerSize } = this.props;\n    const { playerScore, highScore, globalHighScore, debug } = this.state;\n    \n    // clear intervals\n    clearInterval(this.gameInterval); \n    clearInterval(this.enemyInterval);\n    clearInterval(this.timeInterval);\n\n    // if high score is higher than global high score, update it\n    if (playerScore > globalHighScore) {\n        this.updateGlobalHighScore(playerScore);\n    }\n\n    // reset state\n    this.setState({\n        ...getDefaultState({ boardSize, playerSize, highScore }),\n        // persist debug state and high scores\n        debug,\n        highScore: playerScore > highScore ? playerScore : highScore,\n        globalHighScore\n    });\n    // restart game\n    this.startGame();\n\n}\n\nhandleSnakePositions=(dirObj)=>{\n    console.log(dirObj)\n const { snakeSpeed, position: { snake }}= this.state;\n //const board=size.board.boardSize;\n \n        this.setState({\n            position: {\n                ...this.state.position,\n                snake:((snake,board)=>{\n\n                    // based on direction, increment the correct value (top / left)\n                    switch(dirObj.dir) {\n                        case UP:\n                        snake.top -= snakeSpeed;\n                        if (snake.top === 0){\n                            this.gameOver();\n                        }\n                        break;\n                    case DOWN:\n                    snake.top += snakeSpeed;\n                    if (snake.top === board){\n                        this.gameOver();\n                    }\n                        break;\n                    case LEFT:\n                    snake.left -= snakeSpeed;\n                    if (snake.left === 0){\n                        this.gameOver();\n                    }\n                        break;\n                    case RIGHT:\n                    snake.left += snakeSpeed;\n                    if (snake.left === board){\n                        this.gameOver();\n                    }\n                        break;\n                    }\n\n                    snake.top= snake.top + (5*dirObj.top);\n                    snake.left= snake.left + ( 5*dirObj.left);\n                    return snake;\n                \n                  })(snake,this.state.size.board.boardSize)\n                \n         \n            }\n        \n        });\n       \n    }\n    render(){\n      \n        const { \n            size: { board, player }, \n            position: { player: playerPos },\n            playerScore,\n            timeElapsed\n            //highScore,\n            //globalHighScore\n        } = this.state;\n        return (\n            <div>  \n                 <Board dimension={this.state.size.board.boardSize}>\n\n                 <Food food={this.state.position.food}/>\n\n                 {(this.state.gameOver === true )&&\n                 <gameOver>\n                    <Modal.Dialog>\n                        <Modal.Header closeButton>\n                            <Modal.Title>Game Over</Modal.Title>\n                        </Modal.Header>\n\n                        <Modal.Body>\n                            <p>Player Score: {playerScore}</p>\n                        </Modal.Body>\n\n                        <Modal.Footer>\n                            <Button variant=\"secondary\" onClick={this.resetGame}>Restart</Button>\n                            <Button variant=\"primary\">Close</Button>\n                        </Modal.Footer>\n                        </Modal.Dialog>\n                 </gameOver>\n                 }\n\n                 <Snake key={this.state.position.snake.key}\n                  info={this.state.position.snake}\n                  playerPosition={playerPos}\n                  handleSnakePositions={this.handleSnakePositions} \n                  onCollide={this.handlePlayerCollision} />\n\n                  </Board>\n\n                {/* {false && <p style={{ position: 'fixed', bottom: 0, left: 16 }}>Debug: <input type=\"checkbox\" onChange={this.handleDebugToggle} ref={ n => this.debug = n }/></p>}\n                {this.state.debug && <DebugState data={this.state} />} */}\n            </div>\n            \n        )\n    }\n    componentDidMount() {\n        this.startGame();\n      //  this.fetchGlobalHighScore();\n    }\n\n    componentWillUnmount() {\n       // clearInterval(this.state.gameInterval);\n        clearInterval(this.state.snakeInterval);\n        clearInterval(this.state.timeInterval);\n    }\n}\nexport default Game;"]},"metadata":{},"sourceType":"module"}